{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","listen","grammar","person","day","time","boolean_grammar","agreement","Boolean","disagreement","uncertain","dmMachine","initial","states","start_point","on","CLICK","choice_of_tool","id","RECOGNISED","actions","assign","context","task","recResult","target","prompt","entry","ENDSPEECH","ask","nomatch","choice","invoke","src","event","nluRequest","fetch","Request","proxyurl","method","headers","body","then","data","json","onDone","intentResult","intent","name","console","log","onError","tool","cond","timer","to_do_item","appointment","who","length","specific","whole_day","canceled","repetition","confirmation","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.c7448048.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\r\n\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nfunction listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\n\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://rafalappointment.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json()); \r\n\r\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\r\n    \"John\": { person: \"John Appleseed\" },\r\n    \"John Appleseed\": { person: \"John Appleseed\" },\r\n    \"Jack\": { person: \"Jack Jackson\" },\r\n    \"Jack Jackson\": { person: \"Jack Jackson\" },\r\n    \"Liana\": { person: \"Liana Jelena\" },\r\n    \"Liana Jelena\": { person: \"Liana Jelena\" },\r\n    \"Natalie\": { person: \"Natalie Portman\" },\r\n    \"Natalie Portman\": { person: \"Natalie Portman\" },\r\n    \"Bruce\": { person: \"Bruce W\" },\r\n    \"Bob\": { person: \"Bob the builder\" },\r\n    \"Bob the builder\": { person: \"Bob the builder\" },\r\n    \"Shrek\": { person: \"Shrek from the swamp\" },\r\n    \"Shrek from the swap\": { person: \"Shrek\" },\r\n\r\n    \"on Monday\": {day: \"Monday\" },\r\n    \"Monday\": {day: \"Monday\" },\r\n    \"on Tuesday\": {day: \"Tuesday\" },\r\n    \"Tuesday\": {day: \"Tuesday\" },\r\n    \"on Wednesday\": {day: \"Wednesday\" },\r\n    \"Wednesday\": {day: \"Wednesday\" },\r\n    \"on Thursday\": {day: \"Thursday\" },\r\n    \"Thursday\": {day: \"Thursday\" },\r\n    \"on Friday\": {day: \"Friday\" },\r\n    \"Friday\": {day: \"Friday\" },\r\n    \"on Satudary\": {day: \"Satuday\" },\r\n    \"Satudary\": {day: \"Satuday\" },\r\n    \"on Sunday\": {day: \"Sunday\" },\r\n    \"Sunday\": {day: \"Sunday\" },\r\n\r\n    \"10\": { time: \"10:00\" },\r\n    \"at 10\": { time: \"10:00\" },\r\n    \"ten\": { time: \"10:00\" },\r\n    \"at ten\": { time: \"10:00\" },\r\n    \"11\": { time: \"11:00\" },\r\n    \"eleven\": { time: \"11:00\" },\r\n    \"at 11\": { time: \"11:00\" },\r\n    \"at eleven\": { time: \"11:00\" },\r\n    \"12\": { time: \"12:00\" },\r\n    \"twelve\": { time: \"12:00\" },\r\n    \"at 12\": { time: \"12:00\" },\r\n    \"at twelve\": { time: \"12:00\" },\r\n    \"13\": { time: \"13:00\" },\r\n    \"thirteen\": { time: \"13:00\" },\r\n    \"at 13\": { time: \"13:00\" },\r\n    \"at thirteen\": { time: \"13:00\" },\r\n    \"14\": { time: \"14:00\" },\r\n    \"fourteen\": { time: \"14:00\" },\r\n    \"at 14\": { time: \"14:00\" },\r\n    \"at fourteen\": { time: \"14:00\" },\r\n    \"15\": { time: \"15:00\" },\r\n    \"fifteen\": { time: \"15:00\" },\r\n    \"at 15\": { time: \"15:00\" },\r\n    \"at fifteen\": { time: \"15:00\" },\r\n    \"16\": { time: \"16:00\" },\r\n    \"sixteen\": { time: \"16:00\" },\r\n    \"at 16\": { time: \"16:00\" },\r\n    \"at sixteen\": { time: \"16:00\" },\r\n    \"17\": { time: \"17:00\" },\r\n    \"seventeen\": { time: \"17:00\" },\r\n    \"at 17\": { time: \"17:00\" },\r\n    \"at seventeen\": { time: \"17:00\" },\r\n    \"18\": { time: \"18:00\" },\r\n    \"eighteen\": { time: \"18:00\" },\r\n    \"at 18\": { time: \"18:00\" },\r\n    \"at eighteen\": { time: \"18:00\" },\r\n    \"19\": { time: \"19:00\" },\r\n    \"nineteen\": { time: \"19:00\" },\r\n    \"at 19\": { time: \"19:00\" },\r\n    \"at nineteen\": { time: \"19:00\" },\r\n    \"20\": { time: \"20:00\" },\r\n    \"twenty\": { time: \"20:00\" },\r\n    \"at 20\": { time: \"20:00\" },\r\n    \"at twenty\": { time: \"20:00\" },\r\n\r\n}\r\n\r\nconst boolean_grammar: {[index: string]: {agreement?: boolean, disagreement?: boolean, uncertain?: string}} = {\r\n    \"yes\": {agreement: Boolean(true)},\r\n    \"of course\": {agreement: Boolean(true)},\r\n    \"sure\": {agreement: Boolean(true)},\r\n    \"absolutely\": {agreement: Boolean(true)},\r\n    \"yes please\": {agreement: Boolean(true)},\r\n    \"no\": {disagreement: Boolean(false)},\r\n    \"no way\": {disagreement: Boolean(false)},\r\n    \"absolutely not\": {disagreement: Boolean(false)},\r\n    \"never\": {disagreement: Boolean(false)},\r\n    \"maybe\": {uncertain: \"unsure\"},\r\n    \"perhaps\": {uncertain: \"unsure\"},\r\n    \"I don't know\": {uncertain: \"unsure\"},\r\n    \"probably\": {uncertain: \"unsure\"},\r\n}\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    \r\n    initial: 'start_point',\r\n    states: {\r\n        start_point:{\r\n            on: {\r\n                CLICK: 'choice_of_tool'\r\n            }\r\n        },\r\n        choice_of_tool:{\r\n            id: 'make_a_choice',\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED:[{\r\n                    actions: assign((context) => { return { task: context.recResult } }),\r\n                    target: 'choice'},\r\n                \r\n                {target: \".nomatch\"}]\r\n            },\r\n            states:{\r\n                prompt: { entry: say(\"What would you like to do?\"),\r\n                        on: {ENDSPEECH: 'ask'}\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: { entry: say(\"Sorry, I didn't quite get you. Could you please repeat?\"),\r\n                on: {ENDSPEECH: 'ask'}}\r\n            }\r\n        },\r\n        choice:{\r\n            invoke: {\r\n                id: 'rasaApi',\r\n                src: (context, event) =>  nluRequest(context.task),\r\n                onDone:{\r\n                    target: 'tool',\r\n                    actions:[\r\n                        assign((context, event) => { return { intentResult: event.data.intent.name} }),\r\n                        (context:SDSContext, event:any) => console.log(event.data)]\r\n                },\r\n                onError:{\r\n                    target: 'choice_of_tool',\r\n                    actions: (context, event) => console.log(event.data)\r\n\r\n                }\r\n\r\n            }\r\n\r\n        },\r\n        tool:{\r\n            initial: 'prompt',\r\n            on:{\r\n                ENDSPEECH:[{\r\n                    cond: (context) => context.intentResult === 'to_do_item',\r\n                    target: 'to_do_item'},\r\n                    {cond: (context) => context.intentResult === 'appointment',\r\n                    target: 'appointment'},\r\n                    {cond: (context) => context.intentResult === 'timer',\r\n                    target: 'timer'},\r\n                {target:'.nomatch'}]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Ok, let's see if I can help you with ${context.task}.`}))},\r\n                nomatch: {\r\n                    entry: say(\"Excuse me, I haven't yet learned such task. Let's try again.\"),\r\n                    on: {ENDSPEECH: '#make_a_choice'}\r\n                        \r\n                    }\r\n                        \r\n                }\r\n\r\n        },\r\n        timer: {\r\n            initial: 'prompt',\r\n            on: {ENDSPEECH: 'choice_of_tool'},\r\n            states:{\r\n                prompt:{\r\n                    entry: say(\"Welcome to the timer tool! Sorry, this tool has not yet been developed.\")\r\n                }\r\n            }\r\n        },\r\n        to_do_item: {\r\n            initial: 'prompt',\r\n            on: {ENDSPEECH: 'choice_of_tool'},\r\n            states:{\r\n                prompt:{\r\n                    entry: say(\"Welcome to the to do item tool! Sorry, this tool has not yet been developed.\")\r\n                }\r\n            }\r\n        },\r\n        appointment:{\r\n            initial: 'prompt',\r\n            on:{ ENDSPEECH: 'who'\r\n            },\r\n            states:{\r\n                prompt:{\r\n                    entry: say(\"Welcome to the appointment tool! Let's create an appointment.\")\r\n                }\r\n            }\r\n        },\r\n            who: {\r\n                initial: \"prompt\",\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"person\" in (grammar[context.recResult] || {}),\r\n                        actions: assign((context) => { return { person: grammar[context.recResult].person } }),\r\n                        target: \"day\"},\r\n    \r\n                    { target: \".nomatch\" }]\r\n                },\r\n                states: {\r\n                    prompt: {\r\n                        entry: say(\"Who are you meeting with?\"),\r\n                        on: { ENDSPEECH: \"ask\" }\r\n                    },\r\n                    ask: {\r\n                        entry: listen()\r\n                    },\r\n                    nomatch: { entry: send((context) => ({\r\n                            type: \"SPEAK\",\r\n                            value: `Sorry, I don't know them. Please choose someone from your contacts list.`})),\r\n                            on: {ENDSPEECH: \"ask\"}}\r\n        \r\n                    }\r\n            },\r\n            day: {\r\n                initial: \"prompt\",\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"day\" in (grammar[context.recResult] || {}),\r\n                        actions: assign((context) => {return{ day: grammar[context.recResult].day}}),\r\n                        target: \"length\"\r\n                    },\r\n                    {target: \".nomatch\"}]\r\n                },\r\n                states: {\r\n                    prompt: {\r\n                        entry: send((context) => ({\r\n                            type: \"SPEAK\",\r\n                            value: `OK. ${context.person}. On which day is your meeting?`})),\r\n                        on: {ENDSPEECH: \"ask\"}\r\n                        },\r\n                    ask: {\r\n                        entry: listen()\r\n                    },\r\n                    nomatch: {\r\n                        entry: say(\"Sorry, I don't understand. Please repeat\"),\r\n                        on: {ENDSPEECH: \"ask\"}\r\n                    }\r\n                }\r\n            },\r\n            length: {\r\n                initial: \"prompt\" ,\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        target: \"whole_day\"},\r\n\r\n                        {cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        target: \"time\"},\r\n\r\n                        {cond: (context) => \"uncertain\" in (boolean_grammar[context.recResult] || {}),\r\n                        target: \".specific\"},\r\n\r\n                    {target:\".nomatch\"}]\r\n\r\n                    },\r\n                states: {\r\n                    prompt: {\r\n                        entry: say(\"Will it take the whole day?\"),\r\n                        on: {ENDSPEECH: \"ask\"}\r\n                    },\r\n                    ask: {\r\n                        entry: listen()\r\n                    },\r\n                    nomatch: {\r\n                        entry: say(\"Sorry, I did not understand you this time.\"),\r\n                    on: {ENDSPEECH: \"ask\"}\r\n                    },\r\n                    specific: {\r\n                        entry: say(\"please be more specific.\"),\r\n                    on: {ENDSPEECH: \"ask\"},\r\n                    }\r\n                }\r\n            },\r\n            time: {\r\n                initial: \"prompt\" ,\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n                        actions: assign((context) => {return{ time: grammar[context.recResult].time}}),\r\n                        target: \"repetition\"\r\n                        },\r\n                    {\r\n                    target: \".nomatch\"\r\n                    }]\r\n                },\r\n                states: {\r\n                    prompt: {\r\n                        entry: say(\"What time is your meeting?\"),\r\n                        on: {ENDSPEECH: \"ask\"}\r\n                    },\r\n                    ask: {\r\n                        entry: listen()\r\n                    },\r\n                    nomatch: {\r\n                        entry: say(\"Sorry, I don't understand. Please repeat\"),\r\n                        on: {ENDSPEECH: \"ask\"}}\r\n                    }\r\n            },\r\n            whole_day: {\r\n                initial: \"prompt\" ,\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        target: \"confirmation\"},\r\n                        {\r\n                        cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        target: \".canceled\"},\r\n\r\n                    {target: \".nomatch\"}]\r\n                },\r\n                states:{\r\n                    prompt:{\r\n                        entry: send((context) => ({\r\n                            type: \"SPEAK\",\r\n                            value:`Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`})),\r\n                        on: {ENDSPEECH: \"ask\"}\r\n\r\n                    },\r\n                    ask: {\r\n                        entry: listen()\r\n                    },\r\n                    canceled: {\r\n                        entry: say(\"The appointment has been canceled.\"),\r\n                        on: {ENDSPEECH: '#make_a_choice'}\r\n\r\n                    },\r\n                    nomatch: {\r\n                        entry: say(\"Sorry, I don't understand. Please repeat\"),\r\n                        on: {ENDSPEECH: \"ask\"}}\r\n                }\r\n            },\r\n            repetition: {\r\n                initial: \"prompt\" ,\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        target: \"confirmation\"},\r\n                        {\r\n                        cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        target: \".canceled\"},\r\n                        {cond: (context) => \"unsure\" in (boolean_grammar[context.recResult] || {}),\r\n                        target: \".specific\"},\r\n                    {target: \".nomatch\"}]\r\n                },\r\n                states:{\r\n                    prompt:{\r\n                        entry: send((context) => ({\r\n                            type: \"SPEAK\",\r\n                            value:`Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?`})),\r\n                            on: {ENDSPEECH: \"ask\"}\r\n                    },\r\n                    canceled: {\r\n                        entry: say(\"The appointment has been cancell\\ed.\"),\r\n                        on: {ENDSPEECH: '#make_a_choice'}\r\n                    },\r\n                    ask: {\r\n                        entry: listen()\r\n                    },\r\n                    specific:{\r\n                        entry: say(\"Please be more specific.\"),\r\n                        on: {ENDSPEECH: 'ask'}\r\n                    },\r\n                    nomatch: {\r\n                        entry: say(\"Sorry, I don't understand. Please repeat\"),\r\n                        on: {ENDSPEECH: \"ask\"}}}\r\n            },\r\n            confirmation: {\r\n                initial: \"prompt\" ,\r\n                on: {\r\n                     RECOGNISED: [{\r\n                        cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        target: \"to_do_item\"},\r\n                        {\r\n                        cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        target: \"#make_a_choice\"},\r\n                        {\r\n                        cond: (context) => \"unsure\" in (boolean_grammar[context.recResult] || {}),\r\n                        target: \".specific\"},\r\n\r\n                    {target: \".nomatch\"}]\r\n                },\r\n                states: {\r\n                    prompt: {\r\n                        entry: say(\"Your appointment has been created! Would you like to add it to your to do list? \"),\r\n                        on: {ENDSPEECH: 'ask'}\r\n                    },\r\n                    ask: {entry: listen(),\r\n                    },\r\n                    nomatch:{\r\n                        entry: say(\"Sorry, I did not get you.\")\r\n                    },\r\n                    specific:{\r\n                        entry: say(\"Please be more specific\"),\r\n                        on: {ENDSPEECH: 'ask'}\r\n                    }\r\n                }\r\n            },\r\n        }\r\n})","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, send, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachine } from \"./dmAppointment\";\r\n\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\r\n\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine\r\n        },\r\n        asrtts: {\r\n            initial: 'idle',\r\n            states: {\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    }\r\n                },\r\n                recognising: {\r\n                    initial: 'progress',\r\n                    entry: 'recStart',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => { return { recResult: event.value } })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: 'idle'\r\n                    },\r\n                    states: {\r\n                        progress: {},\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('<< ASR: ' + context.recResult);\r\n            },\r\n            test: () => {\r\n                console.log('test')\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\r\n                    Listening...\r\n                </button>\r\n            );\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\r\n                    Speaking...\r\n                </button>\r\n            );\r\n        default:\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\r\n                    Click to start\r\n                </button >\r\n            );\r\n    }\r\n}\r\n\r\nfunction App() {\r\n    const { speak, cancel, speaking } = useSpeechSynthesis({\r\n        onEnd: () => {\r\n            send('ENDSPEECH');\r\n        },\r\n    });\r\n    const { listen, listening, stop } = useSpeechRecognition({\r\n        onResult: (result: any) => {\r\n            send({ type: \"ASRRESULT\", value: result });\r\n        },\r\n    });\r\n    const [current, send, service] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n            recStart: asEffect(() => {\r\n                console.log('Ready to receive a color command.');\r\n                listen({\r\n                    interimResults: false,\r\n                    continuous: true\r\n                });\r\n            }),\r\n            recStop: asEffect(() => {\r\n                console.log('Recognition stopped.');\r\n                stop()\r\n            }),\r\n            changeColour: asEffect((context) => {\r\n                console.log('Repainting...');\r\n                document.body.style.background = context.recResult;\r\n            }),\r\n            ttsStart: asEffect((context, effect) => {\r\n                console.log('Speaking...');\r\n                speak({ text: context.ttsAgenda })\r\n            }),\r\n            ttsCancel: asEffect((context, effect) => {\r\n                console.log('TTS STOP...');\r\n                cancel()\r\n            })\r\n            /* speak: asEffect((context) => {\r\n\t     * console.log('Speaking...');\r\n             *     speak({text: context.ttsAgenda })\r\n             * } */\r\n        }\r\n    });\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\n/* RASA API\r\n *  */\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://rafalappointment.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json());\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);\r\n"],"sourceRoot":""}