{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","listen","grammar","person","day","time","boolean_grammar","agreement","Boolean","disagreement","dmMachine","initial","states","init","on","CLICK","welcome","ENDSPEECH","prompt","entry","who","RECOGNISED","cond","context","recResult","actions","assign","target","ask","nomatch","length","whole_day","repetition","confirmation","inspect","url","iframe","machine","Machine","id","dm","asrtts","idle","LISTEN","SPEAK","event","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","console","log","test","logIntent","nluData","intent","name","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","body","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.aa36c3fe.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\r\n\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nfunction listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\r\n    \"John\": { person: \"John Appleseed\" },\r\n    \"Jack\": { person: \"Jack Jackson\" },\r\n    \"Liana\": { person: \"Liana Jelena\" },\r\n    \"Natalie\": { person: \"Natalie Portman\" },\r\n    \"Bruce\": { person: \"Bruce W\" },\r\n    \"Bob\": { person: \"Bob the builder\" },\r\n    \"Shrek\": { person: \"Shrek\" },\r\n\r\n    \"on Monday\": {day: \"Monday\" },\r\n    \"on Tuesday\": {day: \"Tuesday\" },\r\n    \"on Wednesday\": {day: \"Wednesday\" },\r\n    \"on Thursday\": {day: \"Thursday\" },\r\n    \"on Friday\": {day: \"Friday\" },\r\n    \"on Satudary\": {day: \"Satuday\" },\r\n    \"on Sunday\": {day: \"Sunday\" },\r\n\r\n    \"ten\": { time: \"10:00\" },\r\n    \"eleven\": {time: \"11:00\"},\r\n    \"twelve\": {time: \"12:00\"},\r\n    \"one\": {time: \"13:00\"},\r\n    \"two\": {time: \"14:00\"},\r\n    \"three\": {time: \"15:00\"},\r\n    \"four\": {time: \"16:00\"},\r\n    \"five\": {time: \"17:00\"},\r\n    \"six\": {time: \"18:00\"},\r\n    \"seven\": {time: \"19:00\"},\r\n\r\n\r\n}\r\n\r\nconst boolean_grammar: {[index: string]: {agreement?: boolean, disagreement?: boolean}} = {\r\n    \"yes\": {agreement: Boolean(true)},\r\n    \"of course\": {agreement: Boolean(true)},\r\n    \"sure\": {agreement: Boolean(true)},\r\n    \"no\": {disagreement: Boolean(false)},\r\n    \"no way\": {disagreement: Boolean(false)},\r\n    \"absolutely not\": {disagreement: Boolean(false)}\r\n}\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'welcome'\r\n            }\r\n        },\r\n        welcome: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"who\" },\r\n            states: {\r\n                prompt: { entry: say(\"Let's create an appointment\") }\r\n            }\r\n        },\r\n        who: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\r\n                    target: \"day\"\r\n\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Who are you meeting with?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't know them\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        day: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => {return{ day: grammar[context.recResult].day}}),\r\n                    target: \"length\"\r\n                },\r\n                {target: \".nomatch\"}]\r\n             },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK. ${context.person}. On which day is your meeting?`,\r\n                        on: {ENDSPEECH: \"ask\"}\r\n                    }))},\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't understand. Please repeat\"),\r\n                    on: {ENDSPEECH: \"ask\"}\r\n                }\r\n            }\r\n        },\r\n        length: {\r\n            initial: \"prompt\" ,\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                    target: \"whole_day\"},\r\n\r\n                    {cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                    target: \"time\"},\r\n\r\n                {target:\".nomatch\"}]\r\n\r\n                },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Will it take the whole day?\"),\r\n                    on: {ENDSPEECH: \"ask\"}\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't understand. Please repeat\"),\r\n                on: {ENDSPEECH: \"ask\"}\r\n                }\r\n            }\r\n        },\r\n        time: {\r\n            initial: \"prompt\" ,\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => {return{ time: grammar[context.recResult].time}}),\r\n                    target: \"repetition\"\r\n                    },\r\n                {\r\n                target: \".nomatch\"\r\n                }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"What time is your meeting?\"),\r\n                    on: {ENDSPEECH: \"ask\"}\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't understand. Please repeart\"),\r\n                    on: {ENDSPEECH: \"ask\"}}\r\n                }\r\n        },\r\n        whole_day: {\r\n            initial: \"prompt\" ,\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                    target: \"confirmation\"},\r\n                    {\r\n                    cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                    target: \"who\"},\r\n\r\n                {target: \".nomatch\"}]\r\n            },\r\n            states:{\r\n                prompt:{\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value:`Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?`,\r\n                        on: {ENDSPEECH: \"ask\"}\r\n                    }))\r\n\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't understand. Please repeart\"),\r\n                    on: {ENDSPEECH: \"ask\"}}\r\n            }\r\n        },\r\n        repetition: {\r\n            initial: \"prompt\" ,\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                    target: \"confirmation\"},\r\n                    {\r\n                    cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                    target: \"who\"},\r\n\r\n                {target: \".nomatch\"}]\r\n            },\r\n            states:{\r\n                prompt:{\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value:`Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`,\r\n                        on: {ENDSPEECH: \"ask\"}\r\n                    }))\r\n\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't understand. Please repeart\"),\r\n                    on: {ENDSPEECH: \"ask\"}}\r\n            }\r\n        },\r\n        confirmation: {\r\n            initial: \"prompt\" ,\r\n            on: {\r\n                ENDSPEECH: \"who\"\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Your appointment has been created!\")\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n})\r\n","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, send, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachine } from \"./dmAppointment\";\r\n\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\r\n\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine\r\n        },\r\n        asrtts: {\r\n            initial: 'idle',\r\n            states: {\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    }\r\n                },\r\n                recognising: {\r\n                    initial: 'progress',\r\n                    entry: 'recStart',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => { return { recResult: event.value } })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: 'idle'\r\n                    },\r\n                    states: {\r\n                        progress: {},\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('<< ASR: ' + context.recResult);\r\n            },\r\n            test: () => {\r\n                console.log('test')\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\r\n                    Listening...\r\n                </button>\r\n            );\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\r\n                    Speaking...\r\n                </button>\r\n            );\r\n        default:\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\r\n                    Click to start\r\n                </button >\r\n            );\r\n    }\r\n}\r\n\r\nfunction App() {\r\n    const { speak, cancel, speaking } = useSpeechSynthesis({\r\n        onEnd: () => {\r\n            send('ENDSPEECH');\r\n        },\r\n    });\r\n    const { listen, listening, stop } = useSpeechRecognition({\r\n        onResult: (result: any) => {\r\n            send({ type: \"ASRRESULT\", value: result });\r\n        },\r\n    });\r\n    const [current, send, service] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n            recStart: asEffect(() => {\r\n                console.log('Ready to receive a color command.');\r\n                listen({\r\n                    interimResults: false,\r\n                    continuous: true\r\n                });\r\n            }),\r\n            recStop: asEffect(() => {\r\n                console.log('Recognition stopped.');\r\n                stop()\r\n            }),\r\n            changeColour: asEffect((context) => {\r\n                console.log('Repainting...');\r\n                document.body.style.background = context.recResult;\r\n            }),\r\n            ttsStart: asEffect((context, effect) => {\r\n                console.log('Speaking...');\r\n                speak({ text: context.ttsAgenda })\r\n            }),\r\n            ttsCancel: asEffect((context, effect) => {\r\n                console.log('TTS STOP...');\r\n                cancel()\r\n            })\r\n            /* speak: asEffect((context) => {\r\n\t     * console.log('Speaking...');\r\n             *     speak({text: context.ttsAgenda })\r\n             * } */\r\n        }\r\n    });\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\n/* RASA API\r\n *  */\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://rasa-nlu-api-00.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json());\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);\r\n"],"sourceRoot":""}