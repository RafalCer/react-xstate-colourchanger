{"ast":null,"code":"import { send, assign } from \"xstate\";\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://rafalappointment.herokuapp.com/model/parse';\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://maraev.me'\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Jack\": {\n    person: \"Jack Jackson\"\n  },\n  \"Liana\": {\n    person: \"Liana Jelena\"\n  },\n  \"Natalie\": {\n    person: \"Natalie Portman\"\n  },\n  \"Bruce\": {\n    person: \"Bruce W\"\n  },\n  \"Bob\": {\n    person: \"Bob the builder\"\n  },\n  \"Shrek\": {\n    person: \"Shrek\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"Monday\": {\n    day: \"Monday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"Friday\": {\n    day: \"Friday\"\n  },\n  \"on Satudary\": {\n    day: \"Satuday\"\n  },\n  \"Satudary\": {\n    day: \"Satuday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"Sunday\": {\n    day: \"Sunday\"\n  },\n  \"10\": {\n    time: \"10:00\"\n  },\n  \"11\": {\n    time: \"11:00\"\n  },\n  \"12\": {\n    time: \"12:00\"\n  },\n  \"13\": {\n    time: \"13:00\"\n  },\n  \"14\": {\n    time: \"14:00\"\n  },\n  \"15\": {\n    time: \"15:00\"\n  },\n  \"16\": {\n    time: \"16:00\"\n  },\n  \"17\": {\n    time: \"17:00\"\n  },\n  \"18\": {\n    time: \"18:00\"\n  },\n  \"19\": {\n    time: \"19:00\"\n  }\n};\nconst boolean_grammar = {\n  \"yes\": {\n    agreement: Boolean(true)\n  },\n  \"of course\": {\n    agreement: Boolean(true)\n  },\n  \"sure\": {\n    agreement: Boolean(true)\n  },\n  \"absolutely\": {\n    agreement: Boolean(true)\n  },\n  \"yes please\": {\n    agreement: Boolean(true)\n  },\n  \"no\": {\n    disagreement: Boolean(false)\n  },\n  \"no way\": {\n    disagreement: Boolean(false)\n  },\n  \"absolutely not\": {\n    disagreement: Boolean(false)\n  },\n  \"never\": {\n    disagreement: Boolean(false)\n  },\n  \"maybe\": {\n    uncertain: \"unsure\"\n  },\n  \"perhaps\": {\n    uncertain: \"unsure\"\n  },\n  \"I don't know\": {\n    uncertain: \"unsure\"\n  },\n  \"probably\": {\n    uncertain: \"unsure\"\n  }\n};\n/*const type_grammar: {[index: string]: {task?: string}} = {\r\n    \"appointment\": {task: \"appointment\"},\r\n    \"shcedule an appointment\": {task: \"appointment\"},\r\n    \"shcedule appointment\": {task: \"appointment\"},\r\n    \"make an appointment\": {task: \"appointment\"},\r\n    \"make appointment\": {task: \"appointment\"},\r\n\r\n\r\n    \"timer\": {task: \"timer\"},\r\n    \"set a timer\": {task: \"timer\"},\r\n    \"set timer\": {task: \"timer\"},\r\n\r\n    \"to do item\": {task: \"to do item\"},\r\n    \"todo item\": {task: \"to do item\"},\r\n    \"item\": {task: \"to do item\"},*/\n\nexport const dmMachine = {\n  initial: 'start_point',\n  states: {\n    start_point: {\n      on: {\n        CLICK: 'choice_of_tool'\n      }\n    },\n    choice_of_tool: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          /*                  cond: (context) => \"appointment\" in (type_grammar[context.recResult] || {}), */\n          actions: assign(context => {\n            return {\n              task: context.recResult\n            };\n          }),\n          target: 'choice'\n        },\n        /*                    {cond: (context) => \"timer\" in (type_grammar[context.recResult] || {}),\r\n                            actions: assign((context) => { return { task: context.recResult } }),\r\n                            target: 'timer'}, */\n\n        /*                    {cond: (context) =>  \"todo_item\" in(type_grammar[context.recResult] || {}),\r\n                            actions: assign((context) => { return { task: context.recResult } }),\r\n                            target: 'todo_item'}, */\n        {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"What would you like to do?\"),\n          on: {\n            ENDSPEECH: 'ask'\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I didn't quite get you. Could you please repeat?\"),\n          on: {\n            ENDSPEECH: 'ask'\n          }\n        }\n      }\n    },\n    choice: {\n      invoke: {\n        id: 'rasaApi',\n        src: (context, event) => nluRequest(context.task),\n        onDone: {\n          target: 'tool',\n          actions: [assign((context, event) => {\n            return {\n              intentResult: event.data.intent.name\n            };\n          }), (context, event) => console.log(event.data)]\n        },\n        onError: {\n          target: 'choice_of_tool',\n          actions: (context, event) => console.log(event.data)\n        }\n      }\n    },\n    tool: {\n      initial: 'prompt',\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.intentResult.intent.name === 'todo_item',\n          target: 'todo_item'\n        }, {\n          cond: context => context.intentResult.intent.name === 'appointment',\n          target: 'appointment'\n        }, {\n          cond: context => context.intentResult.intent.name === 'timer',\n          target: 'timer'\n        }, {\n          target: '.nomatch'\n        }]\n      }\n    },\n    timer: {\n      initial: 'prompt',\n      on: {\n        ENDSPEECH: 'choice_of_tool'\n      },\n      states: {\n        prompt: {\n          entry: say(\"Welcome to the timer tool!\")\n        }\n      }\n    },\n    todo_item: {\n      initial: 'prompt',\n      on: {\n        ENDSPEECH: 'choice_of_tool'\n      },\n      states: {\n        prompt: {\n          entry: say(\"Welcome to the to do item tool!\")\n        }\n      }\n    },\n    appointment: {\n      initial: 'prompt',\n      on: {\n        ENDSPEECH: 'who'\n      },\n      states: {\n        prompt: {\n          entry: say(\"Welcome to the appointment tool! Let's create an appointment.\")\n        }\n      }\n    },\n    who: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"person\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              person: grammar[context.recResult].person\n            };\n          }),\n          target: \"day\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Who are you meeting with?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I don't know them\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"day\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \"length\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand. Please repeat\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    length: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"agreement\" in (boolean_grammar[context.recResult] || {}),\n          target: \"whole_day\"\n        }, {\n          cond: context => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\n          target: \"time\"\n        }, {\n          cond: context => \"uncertain in\" in (boolean_grammar[context.recResult] || {}),\n          target: \".more_specific\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Will it take the whole day?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Please be more specific.\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        more_specific: {\n          entry: say(\"please be more specific.\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"time\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              time: grammar[context.recResult].time\n            };\n          }),\n          target: \"repetition\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"What time is your meeting?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand. Please repeat\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    whole_day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"agreement\" in (boolean_grammar[context.recResult] || {}),\n          target: \"confirmation\"\n        }, {\n          cond: context => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\n          target: \"who\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand. Please repeat\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    repetition: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"agreement\" in (boolean_grammar[context.recResult] || {}),\n          target: \"confirmation\"\n        }, {\n          cond: context => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\n          target: \"who\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand. Please repeat\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    confirmation: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"who\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Your appointment has been created!\")\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/R/Desktop/DialogueSystems/Lab2/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","say","text","_context","type","value","listen","proxyurl","rasaurl","nluRequest","fetch","Request","method","headers","body","then","data","json","grammar","person","day","time","boolean_grammar","agreement","Boolean","disagreement","uncertain","dmMachine","initial","states","start_point","on","CLICK","choice_of_tool","RECOGNISED","actions","context","task","recResult","target","prompt","entry","ENDSPEECH","ask","nomatch","choice","invoke","id","src","event","onDone","intentResult","intent","name","console","log","onError","tool","cond","timer","todo_item","appointment","who","length","more_specific","whole_day","repetition","confirmation"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\r\n\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nfunction listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\n\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://rafalappointment.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json()); \r\n\r\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\r\n    \"John\": { person: \"John Appleseed\" },\r\n    \"Jack\": { person: \"Jack Jackson\" },\r\n    \"Liana\": { person: \"Liana Jelena\" },\r\n    \"Natalie\": { person: \"Natalie Portman\" },\r\n    \"Bruce\": { person: \"Bruce W\" },\r\n    \"Bob\": { person: \"Bob the builder\" },\r\n    \"Shrek\": { person: \"Shrek\" },\r\n\r\n    \"on Monday\": {day: \"Monday\" },\r\n    \"Monday\": {day: \"Monday\" },\r\n    \"on Tuesday\": {day: \"Tuesday\" },\r\n    \"Tuesday\": {day: \"Tuesday\" },\r\n    \"on Wednesday\": {day: \"Wednesday\" },\r\n    \"Wednesday\": {day: \"Wednesday\" },\r\n    \"on Thursday\": {day: \"Thursday\" },\r\n    \"Thursday\": {day: \"Thursday\" },\r\n    \"on Friday\": {day: \"Friday\" },\r\n    \"Friday\": {day: \"Friday\" },\r\n    \"on Satudary\": {day: \"Satuday\" },\r\n    \"Satudary\": {day: \"Satuday\" },\r\n    \"on Sunday\": {day: \"Sunday\" },\r\n    \"Sunday\": {day: \"Sunday\" },\r\n\r\n    \"10\": { time: \"10:00\" },\r\n    \"11\": { time: \"11:00\" },\r\n    \"12\": { time: \"12:00\" },\r\n    \"13\": { time: \"13:00\" },\r\n    \"14\": { time: \"14:00\" },\r\n    \"15\": { time: \"15:00\" },\r\n    \"16\": { time: \"16:00\" },\r\n    \"17\": { time: \"17:00\" },\r\n    \"18\": { time: \"18:00\" },\r\n    \"19\": { time: \"19:00\" },\r\n\r\n}\r\n\r\nconst boolean_grammar: {[index: string]: {agreement?: boolean, disagreement?: boolean, uncertain?: string}} = {\r\n    \"yes\": {agreement: Boolean(true)},\r\n    \"of course\": {agreement: Boolean(true)},\r\n    \"sure\": {agreement: Boolean(true)},\r\n    \"absolutely\": {agreement: Boolean(true)},\r\n    \"yes please\": {agreement: Boolean(true)},\r\n    \"no\": {disagreement: Boolean(false)},\r\n    \"no way\": {disagreement: Boolean(false)},\r\n    \"absolutely not\": {disagreement: Boolean(false)},\r\n    \"never\": {disagreement: Boolean(false)},\r\n    \"maybe\": {uncertain: \"unsure\"},\r\n    \"perhaps\": {uncertain: \"unsure\"},\r\n    \"I don't know\": {uncertain: \"unsure\"},\r\n    \"probably\": {uncertain: \"unsure\"},\r\n}\r\n\r\n/*const type_grammar: {[index: string]: {task?: string}} = {\r\n    \"appointment\": {task: \"appointment\"},\r\n    \"shcedule an appointment\": {task: \"appointment\"},\r\n    \"shcedule appointment\": {task: \"appointment\"},\r\n    \"make an appointment\": {task: \"appointment\"},\r\n    \"make appointment\": {task: \"appointment\"},\r\n\r\n\r\n    \"timer\": {task: \"timer\"},\r\n    \"set a timer\": {task: \"timer\"},\r\n    \"set timer\": {task: \"timer\"},\r\n\r\n    \"to do item\": {task: \"to do item\"},\r\n    \"todo item\": {task: \"to do item\"},\r\n    \"item\": {task: \"to do item\"},*/\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    \r\n    initial: 'start_point',\r\n    states: {\r\n        start_point:{\r\n            on: {\r\n                CLICK: 'choice_of_tool'\r\n            }\r\n        },\r\n        choice_of_tool:{\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED:[{\r\n/*                  cond: (context) => \"appointment\" in (type_grammar[context.recResult] || {}), */\r\n                    actions: assign((context) => { return { task: context.recResult } }),\r\n                    target: 'choice'},\r\n\r\n/*                    {cond: (context) => \"timer\" in (type_grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { task: context.recResult } }),\r\n                    target: 'timer'}, */\r\n\r\n/*                    {cond: (context) =>  \"todo_item\" in(type_grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { task: context.recResult } }),\r\n                    target: 'todo_item'}, */\r\n                \r\n                {target: \".nomatch\"}]\r\n            },\r\n            states:{\r\n                prompt: { entry: say(\"What would you like to do?\"),\r\n                        on: {ENDSPEECH: 'ask'}\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: { entry: say(\"Sorry, I didn't quite get you. Could you please repeat?\"),\r\n                on: {ENDSPEECH: 'ask'}}\r\n            }\r\n        },\r\n        choice:{\r\n            invoke: {\r\n                id: 'rasaApi',\r\n                src: (context, event) =>  nluRequest(context.task),\r\n                onDone:{\r\n                    target: 'tool',\r\n                    actions:[\r\n                        assign((context, event) => { return { intentResult: event.data.intent.name} }),\r\n                        (context:SDSContext, event:any) => console.log(event.data)]\r\n                },\r\n                onError:{\r\n                    target: 'choice_of_tool',\r\n                    actions: (context, event) => console.log(event.data)\r\n\r\n                }\r\n\r\n            }\r\n\r\n        },\r\n        tool:{\r\n            initial: 'prompt',\r\n            on:{\r\n                ENDSPEECH:[{\r\n                    cond: (context) => context.intentResult.intent.name === 'todo_item',\r\n                    target: 'todo_item'},\r\n                    {cond: (context) => context.intentResult.intent.name === 'appointment',\r\n                    target: 'appointment'},\r\n                    {cond: (context) => context.intentResult.intent.name === 'timer',\r\n                    target: 'timer'},\r\n                {target:'.nomatch'}]\r\n            }\r\n\r\n        },\r\n        timer: {\r\n            initial: 'prompt',\r\n            on: {ENDSPEECH: 'choice_of_tool'},\r\n            states:{\r\n                prompt:{\r\n                    entry: say(\"Welcome to the timer tool!\")\r\n                }\r\n            }\r\n        },\r\n        todo_item: {\r\n            initial: 'prompt',\r\n            on: {ENDSPEECH: 'choice_of_tool'},\r\n            states:{\r\n                prompt:{\r\n                    entry: say(\"Welcome to the to do item tool!\")\r\n                }\r\n            }\r\n        },\r\n        appointment:{\r\n            initial: 'prompt',\r\n            on:{ ENDSPEECH: 'who'\r\n            },\r\n            states:{\r\n                prompt:\r\n                {\r\n                    entry: say(\"Welcome to the appointment tool! Let's create an appointment.\")\r\n                }\r\n            }\r\n        },\r\n            who: {\r\n                initial: \"prompt\",\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"person\" in (grammar[context.recResult] || {}),\r\n                        actions: assign((context) => { return { person: grammar[context.recResult].person } }),\r\n                        target: \"day\"\r\n\r\n                    },\r\n                    { target: \".nomatch\" }]\r\n                },\r\n                states: {\r\n                    prompt: {\r\n                        entry: say(\"Who are you meeting with?\"),\r\n                        on: { ENDSPEECH: \"ask\" }\r\n                    },\r\n                    ask: {\r\n                        entry: listen()\r\n                    },\r\n                    nomatch: {\r\n                        entry: say(\"Sorry I don't know them\"),\r\n                        on: { ENDSPEECH: \"prompt\" }\r\n                    }\r\n                }\r\n            },\r\n            day: {\r\n                initial: \"prompt\",\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"day\" in (grammar[context.recResult] || {}),\r\n                        actions: assign((context) => {return{ day: grammar[context.recResult].day}}),\r\n                        target: \"length\"\r\n                    },\r\n                    {target: \".nomatch\"}]\r\n                },\r\n                states: {\r\n                    prompt: {\r\n                        entry: send((context) => ({\r\n                            type: \"SPEAK\",\r\n                            value: `OK. ${context.person}. On which day is your meeting?`})),\r\n                        on: {ENDSPEECH: \"ask\"}\r\n                        },\r\n                    ask: {\r\n                        entry: listen()\r\n                    },\r\n                    nomatch: {\r\n                        entry: say(\"Sorry, I don't understand. Please repeat\"),\r\n                        on: {ENDSPEECH: \"ask\"}\r\n                    }\r\n                }\r\n            },\r\n            length: {\r\n                initial: \"prompt\" ,\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        target: \"whole_day\"},\r\n\r\n                        {cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        target: \"time\"},\r\n\r\n                        {cond: (context) => \"uncertain in\" in (boolean_grammar[context.recResult] || {}),\r\n                        target: \".more_specific\"},\r\n\r\n                    {target:\".nomatch\"}]\r\n\r\n                    },\r\n                states: {\r\n                    prompt: {\r\n                        entry: say(\"Will it take the whole day?\"),\r\n                        on: {ENDSPEECH: \"ask\"}\r\n                    },\r\n                    ask: {\r\n                        entry: listen()\r\n                    },\r\n                    nomatch: {\r\n                        entry: say(\"Please be more specific.\"),\r\n                    on: {ENDSPEECH: \"ask\"}\r\n                    },\r\n                    more_specific: {\r\n                        entry: say(\"please be more specific.\"),\r\n                    on: {ENDSPEECH: \"ask\"},\r\n                    }\r\n                }\r\n            },\r\n            time: {\r\n                initial: \"prompt\" ,\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n                        actions: assign((context) => {return{ time: grammar[context.recResult].time}}),\r\n                        target: \"repetition\"\r\n                        },\r\n                    {\r\n                    target: \".nomatch\"\r\n                    }]\r\n                },\r\n                states: {\r\n                    prompt: {\r\n                        entry: say(\"What time is your meeting?\"),\r\n                        on: {ENDSPEECH: \"ask\"}\r\n                    },\r\n                    ask: {\r\n                        entry: listen()\r\n                    },\r\n                    nomatch: {\r\n                        entry: say(\"Sorry, I don't understand. Please repeat\"),\r\n                        on: {ENDSPEECH: \"ask\"}}\r\n                    }\r\n            },\r\n            whole_day: {\r\n                initial: \"prompt\" ,\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        target: \"confirmation\"},\r\n                        {\r\n                        cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        target: \"who\"},\r\n\r\n                    {target: \".nomatch\"}]\r\n                },\r\n                states:{\r\n                    prompt:{\r\n                        entry: send((context) => ({\r\n                            type: \"SPEAK\",\r\n                            value:`Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`})),\r\n                        on: {ENDSPEECH: \"ask\"}\r\n\r\n                    },\r\n                    ask: {\r\n                        entry: listen()\r\n                    },\r\n                    nomatch: {\r\n                        entry: say(\"Sorry, I don't understand. Please repeat\"),\r\n                        on: {ENDSPEECH: \"ask\"}}\r\n                }\r\n            },\r\n            repetition: {\r\n                initial: \"prompt\" ,\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        target: \"confirmation\"},\r\n                        {\r\n                        cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        target: \"who\"},\r\n\r\n                    {target: \".nomatch\"}]\r\n                },\r\n                states:{\r\n                    prompt:{\r\n                        entry: send((context) => ({\r\n                            type: \"SPEAK\",\r\n                            value:`Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?`})),\r\n                            on: {ENDSPEECH: \"ask\"}\r\n\r\n                    },\r\n                    ask: {\r\n                        entry: listen()\r\n                    },\r\n                    nomatch: {\r\n                        entry: say(\"Sorry, I don't understand. Please repeat\"),\r\n                        on: {ENDSPEECH: \"ask\"}}\r\n                }\r\n            },\r\n            confirmation: {\r\n                initial: \"prompt\" ,\r\n                on: {\r\n                    ENDSPEECH: \"who\"\r\n                },\r\n                states: {\r\n                    prompt: {\r\n                        entry: say(\"Your appointment has been created!\")\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n})"]},"metadata":{},"sourceType":"module"}