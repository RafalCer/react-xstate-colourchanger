{"ast":null,"code":"import { send, assign } from \"xstate\";\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Jack\": {\n    person: \"Jack Jackson\"\n  },\n  \"Liana\": {\n    person: \"Liana Jelena\"\n  },\n  \"Natalie\": {\n    person: \"Natalie Portman\"\n  },\n  \"Bruce\": {\n    person: \"Bruce W\"\n  },\n  \"Bob\": {\n    person: \"Bob the builder\"\n  },\n  \"Shrek\": {\n    person: \"Shrek\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"Monday\": {\n    day: \"Monday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"Friday\": {\n    day: \"Friday\"\n  },\n  \"on Satudary\": {\n    day: \"Satuday\"\n  },\n  \"Satudary\": {\n    day: \"Satuday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"Sunday\": {\n    day: \"Sunday\"\n  },\n  \"10\": {\n    time: \"10:00\"\n  },\n  \"11\": {\n    time: \"11:00\"\n  },\n  \"12\": {\n    time: \"12:00\"\n  },\n  \"13\": {\n    time: \"13:00\"\n  },\n  \"14\": {\n    time: \"14:00\"\n  },\n  \"15\": {\n    time: \"15:00\"\n  },\n  \"16\": {\n    time: \"16:00\"\n  },\n  \"17\": {\n    time: \"17:00\"\n  },\n  \"18\": {\n    time: \"18:00\"\n  },\n  \"19\": {\n    time: \"19:00\"\n  }\n};\nconst boolean_grammar = {\n  \"yes\": {\n    agreement: Boolean(true)\n  },\n  \"of course\": {\n    agreement: Boolean(true)\n  },\n  \"sure\": {\n    agreement: Boolean(true)\n  },\n  \"absolutely\": {\n    agreement: Boolean(true)\n  },\n  \"yes please\": {\n    agreement: Boolean(true)\n  },\n  \"no\": {\n    disagreement: Boolean(false)\n  },\n  \"no way\": {\n    disagreement: Boolean(false)\n  },\n  \"absolutely not\": {\n    disagreement: Boolean(false)\n  },\n  \"never\": {\n    disagreement: Boolean(false)\n  },\n  \"maybe\": {\n    uncertain: \"unsure\"\n  },\n  \"perhaps\": {\n    uncertain: \"unsure\"\n  },\n  \"I don't know\": {\n    uncertain: \"unsure\"\n  },\n  \"probably\": {\n    uncertain: \"unsure\"\n  }\n};\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"who\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Let's create an appointment\")\n        }\n      }\n    },\n    who: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"person\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              person: grammar[context.recResult].person\n            };\n          }),\n          target: \"day\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Who are you meeting with?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I don't know them\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"day\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \"length\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand. Please repeat\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    length: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"agreement\" in (boolean_grammar[context.recResult] || {}),\n          target: \"whole_day\"\n        }, {\n          cond: context => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\n          target: \"time\"\n        }, {\n          cond: context => \"uncertain in\" in (boolean_grammar[context.recResult] || {}),\n          target: \".more_specific\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Will it take the whole day?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Please be more specific.\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        more_specific: {\n          entry: say(\"please be more specific.\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"time\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              time: grammar[context.recResult].time\n            };\n          }),\n          target: \"repetition\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"What time is your meeting?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand. Please repeat\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    whole_day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"agreement\" in (boolean_grammar[context.recResult] || {}),\n          target: \"confirmation\"\n        }, {\n          cond: context => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\n          target: \"who\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand. Please repeat\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    repetition: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"agreement\" in (boolean_grammar[context.recResult] || {}),\n          target: \"confirmation\"\n        }, {\n          cond: context => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\n          target: \"who\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand. Please repeat\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    confirmation: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"who\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Your appointment has been created!\")\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/R/Desktop/DialogueSystems/Lab2/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","say","text","_context","type","value","listen","grammar","person","day","time","boolean_grammar","agreement","Boolean","disagreement","uncertain","dmMachine","initial","states","init","on","CLICK","welcome","ENDSPEECH","prompt","entry","who","RECOGNISED","cond","context","recResult","actions","target","ask","nomatch","length","more_specific","whole_day","repetition","confirmation"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\r\n\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nfunction listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\r\n    \"John\": { person: \"John Appleseed\" },\r\n    \"Jack\": { person: \"Jack Jackson\" },\r\n    \"Liana\": { person: \"Liana Jelena\" },\r\n    \"Natalie\": { person: \"Natalie Portman\" },\r\n    \"Bruce\": { person: \"Bruce W\" },\r\n    \"Bob\": { person: \"Bob the builder\" },\r\n    \"Shrek\": { person: \"Shrek\" },\r\n\r\n    \"on Monday\": {day: \"Monday\" },\r\n    \"Monday\": {day: \"Monday\" },\r\n    \"on Tuesday\": {day: \"Tuesday\" },\r\n    \"Tuesday\": {day: \"Tuesday\" },\r\n    \"on Wednesday\": {day: \"Wednesday\" },\r\n    \"Wednesday\": {day: \"Wednesday\" },\r\n    \"on Thursday\": {day: \"Thursday\" },\r\n    \"Thursday\": {day: \"Thursday\" },\r\n    \"on Friday\": {day: \"Friday\" },\r\n    \"Friday\": {day: \"Friday\" },\r\n    \"on Satudary\": {day: \"Satuday\" },\r\n    \"Satudary\": {day: \"Satuday\" },\r\n    \"on Sunday\": {day: \"Sunday\" },\r\n    \"Sunday\": {day: \"Sunday\" },\r\n\r\n    \"10\": { time: \"10:00\" },\r\n    \"11\": { time: \"11:00\" },\r\n    \"12\": { time: \"12:00\" },\r\n    \"13\": { time: \"13:00\" },\r\n    \"14\": { time: \"14:00\" },\r\n    \"15\": { time: \"15:00\" },\r\n    \"16\": { time: \"16:00\" },\r\n    \"17\": { time: \"17:00\" },\r\n    \"18\": { time: \"18:00\" },\r\n    \"19\": { time: \"19:00\" },\r\n\r\n\r\n}\r\n\r\nconst boolean_grammar: {[index: string]: {agreement?: boolean, disagreement?: boolean, uncertain?: string}} = {\r\n    \"yes\": {agreement: Boolean(true)},\r\n    \"of course\": {agreement: Boolean(true)},\r\n    \"sure\": {agreement: Boolean(true)},\r\n    \"absolutely\": {agreement: Boolean(true)},\r\n    \"yes please\": {agreement: Boolean(true)},\r\n    \"no\": {disagreement: Boolean(false)},\r\n    \"no way\": {disagreement: Boolean(false)},\r\n    \"absolutely not\": {disagreement: Boolean(false)},\r\n    \"never\": {disagreement: Boolean(false)},\r\n    \"maybe\": {uncertain: \"unsure\"},\r\n    \"perhaps\": {uncertain: \"unsure\"},\r\n    \"I don't know\": {uncertain: \"unsure\"},\r\n    \"probably\": {uncertain: \"unsure\"},\r\n}\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'welcome'\r\n            }\r\n        },\r\n        welcome: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"who\" },\r\n            states: {\r\n                prompt: { entry: say(\"Let's create an appointment\") }\r\n            }\r\n        },\r\n        who: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\r\n                    target: \"day\"\r\n\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Who are you meeting with?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't know them\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        day: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => {return{ day: grammar[context.recResult].day}}),\r\n                    target: \"length\"\r\n                },\r\n                {target: \".nomatch\"}]\r\n             },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK. ${context.person}. On which day is your meeting?`})),\r\n                    on: {ENDSPEECH: \"ask\"}\r\n                    },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't understand. Please repeat\"),\r\n                    on: {ENDSPEECH: \"ask\"}\r\n                }\r\n            }\r\n        },\r\n        length: {\r\n            initial: \"prompt\" ,\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                    target: \"whole_day\"},\r\n\r\n                    {cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                    target: \"time\"},\r\n\r\n                    {cond: (context) => \"uncertain in\" in (boolean_grammar[context.recResult] || {}),\r\n                    target: \".more_specific\"},\r\n\r\n                {target:\".nomatch\"}]\r\n\r\n                },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Will it take the whole day?\"),\r\n                    on: {ENDSPEECH: \"ask\"}\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Please be more specific.\"),\r\n                on: {ENDSPEECH: \"ask\"}\r\n                },\r\n                more_specific: {\r\n                    entry: say(\"please be more specific.\"),\r\n                on: {ENDSPEECH: \"ask\"},\r\n                }\r\n            }\r\n        },\r\n        time: {\r\n            initial: \"prompt\" ,\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => {return{ time: grammar[context.recResult].time}}),\r\n                    target: \"repetition\"\r\n                    },\r\n                {\r\n                target: \".nomatch\"\r\n                }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"What time is your meeting?\"),\r\n                    on: {ENDSPEECH: \"ask\"}\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't understand. Please repeat\"),\r\n                    on: {ENDSPEECH: \"ask\"}}\r\n                }\r\n        },\r\n        whole_day: {\r\n            initial: \"prompt\" ,\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                    target: \"confirmation\"},\r\n                    {\r\n                    cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                    target: \"who\"},\r\n\r\n                {target: \".nomatch\"}]\r\n            },\r\n            states:{\r\n                prompt:{\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value:`Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`})),\r\n                    on: {ENDSPEECH: \"ask\"}\r\n\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't understand. Please repeat\"),\r\n                    on: {ENDSPEECH: \"ask\"}}\r\n            }\r\n        },\r\n        repetition: {\r\n            initial: \"prompt\" ,\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                    target: \"confirmation\"},\r\n                    {\r\n                    cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                    target: \"who\"},\r\n\r\n                {target: \".nomatch\"}]\r\n            },\r\n            states:{\r\n                prompt:{\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value:`Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?`})),\r\n                        on: {ENDSPEECH: \"ask\"}\r\n\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't understand. Please repeat\"),\r\n                    on: {ENDSPEECH: \"ask\"}}\r\n            }\r\n        },\r\n        confirmation: {\r\n            initial: \"prompt\" ,\r\n            on: {\r\n                ENDSPEECH: \"who\"\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Your appointment has been created!\")\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n})\r\n"]},"metadata":{},"sourceType":"module"}