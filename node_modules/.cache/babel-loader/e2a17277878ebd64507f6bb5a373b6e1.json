{"ast":null,"code":"import { send, assign } from \"xstate\";\nimport { loadGrammar } from './runparser';\nimport { parse } from './chartparser';\nimport { grammar } from './grammars/houseGrammar';\nconst gramm = loadGrammar(grammar);\n\nconst UsersCommand = recResult => {\n  let prs = parse(recResult.split(/\\s+/), gramm);\n  const result = prs.resultsForRule(gramm.$root)[0];\n  const HouseOrder = [result.request.object, result.request.action];\n  return HouseOrder;\n};\n\n_c = UsersCommand;\nimport { say } from './dmAppointment';\nimport { listen } from './dmAppointment';\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      id: 'welcome_state',\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          actions: assign(context => {\n            return {\n              HouseCommand: UsersCommand(context.recResult)\n            };\n          }),\n          target: 'action'\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say('What would you like me to do?'),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say('Sorry, I did not quite get you. Please repeat.'),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    action: {\n      initial: \"prompt\",\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Understood! I will now \".concat(context.HouseCommand.action, \" the \").concat(context.HouseCommand.object, \".\")\n          })),\n          on: {\n            ENDSPEECH: \"#welcome_state\"\n          }\n        }\n      }\n    }\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"UsersCommand\");","map":{"version":3,"sources":["C:/Users/R/Desktop/DialogueSystems/Lab2/react-xstate-colourchanger/src/dmSmartHome.ts"],"names":["send","assign","loadGrammar","parse","grammar","gramm","UsersCommand","recResult","prs","split","result","resultsForRule","$root","HouseOrder","request","object","action","say","listen","dmMachine","initial","states","init","on","CLICK","welcome","id","RECOGNISED","actions","context","HouseCommand","target","prompt","entry","ENDSPEECH","ask","nomatch","type","value"],"mappings":"AAAA,SAAwBA,IAAxB,EAAsCC,MAAtC,QAAoD,QAApD;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,SAASC,OAAT,QAAwB,yBAAxB;AACA,MAAMC,KAAK,GAAGH,WAAW,CAACE,OAAD,CAAzB;;AAEA,MAAME,YAAY,GAAIC,SAAD,IAAuB;AAC5C,MAAIC,GAAG,GAAGL,KAAK,CAACI,SAAS,CAACE,KAAV,CAAgB,KAAhB,CAAD,EAAyBJ,KAAzB,CAAf;AACA,QAAMK,MAAM,GAAGF,GAAG,CAACG,cAAJ,CAAmBN,KAAK,CAACO,KAAzB,EAAgC,CAAhC,CAAf;AACA,QAAMC,UAAU,GAAG,CAACH,MAAM,CAACI,OAAP,CAAeC,MAAhB,EAAwBL,MAAM,CAACI,OAAP,CAAeE,MAAvC,CAAnB;AACA,SAAOH,UAAP;AAAkB,CAJlB;;KAAMP,Y;AAMN,SAASW,GAAT,QAAoB,iBAApB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AAEA,OAAO,MAAMC,SAAmD,GAAI;AAChEC,EAAAA,OAAO,EAAE,MADuD;AAEhEC,EAAAA,MAAM,EAAE;AACJC,IAAAA,IAAI,EAAE;AACFC,MAAAA,EAAE,EAAE;AAACC,QAAAA,KAAK,EAAE;AAAR;AADF,KADF;AAIJC,IAAAA,OAAO,EACP;AACIC,MAAAA,EAAE,EAAE,eADR;AAEIN,MAAAA,OAAO,EAAE,QAFb;AAGIG,MAAAA,EAAE,EAAC;AACCI,QAAAA,UAAU,EAAC,CAAC;AACRC,UAAAA,OAAO,EAAE3B,MAAM,CAAE4B,OAAD,IAAa;AAAE,mBAAO;AAAEC,cAAAA,YAAY,EAAExB,YAAY,CAACuB,OAAO,CAACtB,SAAT;AAA5B,aAAP;AAAyD,WAAzE,CADP;AAERwB,UAAAA,MAAM,EAAE;AAFA,SAAD,EAGX;AAACA,UAAAA,MAAM,EAAE;AAAT,SAHW;AADZ,OAHP;AASIV,MAAAA,MAAM,EAAE;AACJW,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAEhB,GAAG,CAAC,+BAAD,CADN;AAEJM,UAAAA,EAAE,EAAE;AAAEW,YAAAA,SAAS,EAAE;AAAb;AAFA,SADJ;AAKJC,QAAAA,GAAG,EAAE;AACDF,UAAAA,KAAK,EAAEf,MAAM;AADZ,SALD;AAQJkB,QAAAA,OAAO,EAAE;AACLH,UAAAA,KAAK,EAAEhB,GAAG,CAAC,gDAAD,CADL;AAELM,UAAAA,EAAE,EAAE;AAAEW,YAAAA,SAAS,EAAE;AAAb;AAFC;AARL;AATZ,KALI;AA4BJlB,IAAAA,MAAM,EAAE;AACJI,MAAAA,OAAO,EAAE,QADL;AAEJC,MAAAA,MAAM,EAAE;AACJW,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAEjC,IAAI,CAAE6B,OAAD,KAAc;AACtBQ,YAAAA,IAAI,EAAE,OADgB;AAEtBC,YAAAA,KAAK,mCAA4BT,OAAO,CAACC,YAAR,CAAqBd,MAAjD,kBAA+Da,OAAO,CAACC,YAAR,CAAqBf,MAApF;AAFiB,WAAd,CAAD,CADP;AAIJQ,UAAAA,EAAE,EAAE;AAACW,YAAAA,SAAS,EAAE;AAAZ;AAJA;AADJ;AAFJ;AA5BJ;AAFwD,CAA7D","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\r\nimport { loadGrammar } from './runparser'\r\nimport { parse } from './chartparser'\r\nimport { grammar } from './grammars/houseGrammar'\r\nconst gramm = loadGrammar(grammar)\r\n\r\nconst UsersCommand = (recResult: string) => {\r\nlet prs = parse(recResult.split(/\\s+/), gramm);\r\nconst result = prs.resultsForRule(gramm.$root)[0];     \r\nconst HouseOrder = [result.request.object, result.request.action]\r\nreturn HouseOrder}\r\n\r\nimport { say } from './dmAppointment'\r\nimport { listen } from './dmAppointment'\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init: {\r\n            on: {CLICK: 'welcome'}\r\n        },\r\n        welcome: \r\n        {\r\n            id: 'welcome_state',\r\n            initial: \"prompt\",\r\n            on:{\r\n                RECOGNISED:[{\r\n                    actions: assign((context) => { return { HouseCommand: UsersCommand(context.recResult) }}),\r\n                    target: 'action'},\r\n                {target: \".nomatch\"}]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say('What would you like me to do?'),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say('Sorry, I did not quite get you. Please repeat.'),\r\n                    on: { ENDSPEECH: \"ask\"}\r\n                }\r\n            }\r\n        },\r\n        action: {\r\n            initial: \"prompt\",\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Understood! I will now ${context.HouseCommand.action} the ${context.HouseCommand.object}.`})),\r\n                    on: {ENDSPEECH: \"#welcome_state\"}\r\n                }\r\n            }\r\n        }\r\n    }\r\n})"]},"metadata":{},"sourceType":"module"}