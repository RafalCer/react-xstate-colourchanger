{"ast":null,"code":"import _objectSpread from \"C:/Users/R/Desktop/DialogueSystems/Lab2/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\";\nexport function say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\nexport function listen() {\n  return send('LISTEN');\n}\n\nfunction say_ask_nomatch_timeout(say_this) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(say_this),\n        on: {\n          ENDSPEECH: 'ask1'\n        }\n      },\n      ask1: {\n        entry: [send('LISTEN'), send('TIMEOUT1', {\n          delay: 4500\n        })]\n      },\n      ask2: {\n        entry: [send('LISTEN'), send('TIMEOUT2', {\n          delay: 5500\n        })]\n      },\n      ask3: {\n        entry: [send('LISTEN'), send('TIMEOUT3', {\n          delay: 6500\n        })]\n      },\n      ask4: {\n        entry: [send('LISTEN'), send('TIMEOUT4', {\n          delay: 5000\n        })]\n      },\n      nomatch: {\n        entry: say('Sorry, I did not manage to understand this one. Please repeat.'),\n        on: {\n          ENDSPEECH: \"ask2\"\n        }\n      },\n      timeout1: {\n        entry: say('I did not hear you this time, please speak louder.'),\n        on: {\n          ENDSPEECH: \"ask2\"\n        }\n      },\n      timeout2: {\n        entry: say('I still cannot hear you, please try again.'),\n        on: {\n          ENDSPEECH: \"ask3\"\n        }\n      },\n      timeout3: {\n        entry: say('Sorry, still nothing.'),\n        on: {\n          ENDSPEECH: \"ask4\"\n        }\n      },\n      timeout4: {\n        entry: say('Returning to idle.'),\n        on: {\n          ENDSPEECH: \"idle\"\n        }\n      },\n      idle: {\n        type: 'final'\n      }\n    }\n  };\n}\n\nfunction timeouts() {\n  return {};\n}\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://rafalappointment.herokuapp.com/model/parse';\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://maraev.me'\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"John Appleseed\": {\n    person: \"John Appleseed\"\n  },\n  \"Jack\": {\n    person: \"Jack Jackson\"\n  },\n  \"Jack Jackson\": {\n    person: \"Jack Jackson\"\n  },\n  \"Liana\": {\n    person: \"Liana Jelena\"\n  },\n  \"Liana Jelena\": {\n    person: \"Liana Jelena\"\n  },\n  \"Natalie\": {\n    person: \"Natalie Portman\"\n  },\n  \"Natalie Portman\": {\n    person: \"Natalie Portman\"\n  },\n  \"Bruce\": {\n    person: \"Bruce W\"\n  },\n  \"Bob\": {\n    person: \"Bob the builder\"\n  },\n  \"Bob the builder\": {\n    person: \"Bob the builder\"\n  },\n  \"Shrek\": {\n    person: \"Shrek from the swamp\"\n  },\n  \"Shrek from the swap\": {\n    person: \"Shrek from the swamp\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"Monday\": {\n    day: \"Monday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"Friday\": {\n    day: \"Friday\"\n  },\n  \"on Satudary\": {\n    day: \"Satuday\"\n  },\n  \"Satudary\": {\n    day: \"Satuday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"Sunday\": {\n    day: \"Sunday\"\n  },\n  \"10\": {\n    time: \"10:00\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"ten\": {\n    time: \"10:00\"\n  },\n  \"at ten\": {\n    time: \"10:00\"\n  },\n  \"11\": {\n    time: \"11:00\"\n  },\n  \"eleven\": {\n    time: \"11:00\"\n  },\n  \"at 11\": {\n    time: \"11:00\"\n  },\n  \"at eleven\": {\n    time: \"11:00\"\n  },\n  \"12\": {\n    time: \"12:00\"\n  },\n  \"twelve\": {\n    time: \"12:00\"\n  },\n  \"at 12\": {\n    time: \"12:00\"\n  },\n  \"at twelve\": {\n    time: \"12:00\"\n  },\n  \"13\": {\n    time: \"13:00\"\n  },\n  \"thirteen\": {\n    time: \"13:00\"\n  },\n  \"at 13\": {\n    time: \"13:00\"\n  },\n  \"at thirteen\": {\n    time: \"13:00\"\n  },\n  \"14\": {\n    time: \"14:00\"\n  },\n  \"fourteen\": {\n    time: \"14:00\"\n  },\n  \"at 14\": {\n    time: \"14:00\"\n  },\n  \"at fourteen\": {\n    time: \"14:00\"\n  },\n  \"15\": {\n    time: \"15:00\"\n  },\n  \"fifteen\": {\n    time: \"15:00\"\n  },\n  \"at 15\": {\n    time: \"15:00\"\n  },\n  \"at fifteen\": {\n    time: \"15:00\"\n  },\n  \"16\": {\n    time: \"16:00\"\n  },\n  \"sixteen\": {\n    time: \"16:00\"\n  },\n  \"at 16\": {\n    time: \"16:00\"\n  },\n  \"at sixteen\": {\n    time: \"16:00\"\n  },\n  \"17\": {\n    time: \"17:00\"\n  },\n  \"seventeen\": {\n    time: \"17:00\"\n  },\n  \"at 17\": {\n    time: \"17:00\"\n  },\n  \"at seventeen\": {\n    time: \"17:00\"\n  },\n  \"18\": {\n    time: \"18:00\"\n  },\n  \"eighteen\": {\n    time: \"18:00\"\n  },\n  \"at 18\": {\n    time: \"18:00\"\n  },\n  \"at eighteen\": {\n    time: \"18:00\"\n  },\n  \"19\": {\n    time: \"19:00\"\n  },\n  \"nineteen\": {\n    time: \"19:00\"\n  },\n  \"at 19\": {\n    time: \"19:00\"\n  },\n  \"at nineteen\": {\n    time: \"19:00\"\n  },\n  \"20\": {\n    time: \"20:00\"\n  },\n  \"twenty\": {\n    time: \"20:00\"\n  },\n  \"at 20\": {\n    time: \"20:00\"\n  },\n  \"at twenty\": {\n    time: \"20:00\"\n  }\n};\nconst boolean_grammar = {\n  \"yes\": {\n    agreement: Boolean(true)\n  },\n  \"of course\": {\n    agreement: Boolean(true)\n  },\n  \"sure\": {\n    agreement: Boolean(true)\n  },\n  \"absolutely\": {\n    agreement: Boolean(true)\n  },\n  \"yes please\": {\n    agreement: Boolean(true)\n  },\n  \"no\": {\n    disagreement: Boolean(false)\n  },\n  \"no way\": {\n    disagreement: Boolean(false)\n  },\n  \"absolutely not\": {\n    disagreement: Boolean(false)\n  },\n  \"never\": {\n    disagreement: Boolean(false)\n  },\n  \"maybe\": {\n    uncertain: \"unsure\"\n  },\n  \"perhaps\": {\n    uncertain: \"unsure\"\n  },\n  \"I don't know\": {\n    uncertain: \"unsure\"\n  },\n  \"probably\": {\n    uncertain: \"unsure\"\n  }\n};\nexport const dmMachine = {\n  initial: 'start_point',\n  states: {\n    start_point: {\n      id: 'starting_poing',\n      on: {\n        CLICK: 'appointment'\n      }\n    },\n    appointment: {\n      initial: 'prompt',\n      on: {\n        ENDSPEECH: 'who'\n      },\n      states: {\n        prompt: {\n          entry: say(\"Let's create an appointment.\")\n        }\n      }\n    },\n    who: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"person\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              person: grammar[context.recResult].person\n            };\n          }),\n          target: \"day\"\n        }, {\n          target: \".nomatch\"\n        }],\n        TIMEOUT1: 'timeout1',\n        TIMEOUT2: 'timeout2',\n        TIMEOUT3: 'timeout3',\n        TIMEOUT4: 'timeout4'\n      }\n    }, say_ask_nomatch_timeout('Who are you meeting with?')),\n    day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"day\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \"length\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand. Please repeat\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    length: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"agreement\" in (boolean_grammar[context.recResult] || {}),\n          target: \"whole_day\"\n        }, {\n          cond: context => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\n          target: \"time\"\n        }, {\n          cond: context => \"uncertain\" in (boolean_grammar[context.recResult] || {}),\n          target: \".specific\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Will it take the whole day?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I did not understand you this time.\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        specific: {\n          entry: say(\"please be more specific.\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"time\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              time: grammar[context.recResult].time\n            };\n          }),\n          target: \"repetition\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"What time is your meeting?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand. Please repeat\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    whole_day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"agreement\" in (boolean_grammar[context.recResult] || {}),\n          target: \"confirmation\"\n        }, {\n          cond: context => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\n          target: \".canceled\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        canceled: {\n          entry: say(\"The appointment has been canceled.\"),\n          on: {\n            ENDSPEECH: '#make_a_choice'\n          }\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand. Please repeat\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    repetition: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"agreement\" in (boolean_grammar[context.recResult] || {}),\n          target: \"confirmation\"\n        }, {\n          cond: context => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\n          target: \".canceled\"\n        }, {\n          cond: context => \"unsure\" in (boolean_grammar[context.recResult] || {}),\n          target: \".specific\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        canceled: {\n          entry: say(\"The appointment has been cancell\\ed.\"),\n          on: {\n            ENDSPEECH: '#make_a_choice'\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        specific: {\n          entry: say(\"Please be more specific.\"),\n          on: {\n            ENDSPEECH: 'ask'\n          }\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand. Please repeat\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    confirmation: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"agreement\" in (boolean_grammar[context.recResult] || {}),\n          target: \"to_do_item\"\n        }, {\n          cond: context => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\n          target: \"#make_a_choice\"\n        }, {\n          cond: context => \"unsure\" in (boolean_grammar[context.recResult] || {}),\n          target: \".specific\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Your appointment has been created! Would you like to add it to your to do list? \"),\n          on: {\n            ENDSPEECH: 'ask'\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I did not get you.\")\n        },\n        specific: {\n          entry: say(\"Please be more specific\"),\n          on: {\n            ENDSPEECH: 'ask'\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/R/Desktop/DialogueSystems/Lab2/react-xstate-colourchanger/src/dmAppointmentLab4.ts"],"names":["send","assign","say","text","_context","type","value","listen","say_ask_nomatch_timeout","say_this","initial","states","prompt","entry","on","ENDSPEECH","ask1","delay","ask2","ask3","ask4","nomatch","timeout1","timeout2","timeout3","timeout4","idle","timeouts","proxyurl","rasaurl","nluRequest","fetch","Request","method","headers","body","then","data","json","grammar","person","day","time","boolean_grammar","agreement","Boolean","disagreement","uncertain","dmMachine","start_point","id","CLICK","appointment","who","RECOGNISED","cond","context","recResult","actions","target","TIMEOUT1","TIMEOUT2","TIMEOUT3","TIMEOUT4","ask","length","specific","whole_day","canceled","repetition","confirmation"],"mappings":";AAAA,SAAwBA,IAAxB,EAAsCC,MAAtC,QAAoD,QAApD;AAGA,OAAO,SAASC,GAAT,CAAaC,IAAb,EAAyD;AAC5D,SAAOH,IAAI,CAAEI,QAAD,KAA2B;AAAEC,IAAAA,IAAI,EAAE,OAAR;AAAiBC,IAAAA,KAAK,EAAEH;AAAxB,GAA3B,CAAD,CAAX;AACH;AAED,OAAO,SAASI,MAAT,GAAgD;AACnD,SAAOP,IAAI,CAAC,QAAD,CAAX;AACH;;AAED,SAASQ,uBAAT,CAAiCC,QAAjC,EAA6F;AACzF,SAAQ;AACJC,IAAAA,OAAO,EAAE,QADL;AAEJC,IAAAA,MAAM,EAAE;AACJC,MAAAA,MAAM,EAAE;AACJC,QAAAA,KAAK,EAAEX,GAAG,CAACO,QAAD,CADN;AAEJK,QAAAA,EAAE,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb;AAFA,OADJ;AAKJC,MAAAA,IAAI,EAAE;AACFH,QAAAA,KAAK,EAAE,CAACb,IAAI,CAAC,QAAD,CAAL,EAAiBA,IAAI,CAAE,UAAF,EAAc;AAACiB,UAAAA,KAAK,EAAE;AAAR,SAAd,CAArB;AADL,OALF;AAQJC,MAAAA,IAAI,EAAE;AACFL,QAAAA,KAAK,EAAE,CAACb,IAAI,CAAC,QAAD,CAAL,EAAiBA,IAAI,CAAE,UAAF,EAAc;AAACiB,UAAAA,KAAK,EAAE;AAAR,SAAd,CAArB;AADL,OARF;AAWJE,MAAAA,IAAI,EAAE;AACFN,QAAAA,KAAK,EAAE,CAACb,IAAI,CAAC,QAAD,CAAL,EAAiBA,IAAI,CAAE,UAAF,EAAc;AAACiB,UAAAA,KAAK,EAAE;AAAR,SAAd,CAArB;AADL,OAXF;AAcJG,MAAAA,IAAI,EAAE;AACFP,QAAAA,KAAK,EAAE,CAACb,IAAI,CAAC,QAAD,CAAL,EAAiBA,IAAI,CAAE,UAAF,EAAc;AAACiB,UAAAA,KAAK,EAAE;AAAR,SAAd,CAArB;AADL,OAdF;AAiBJI,MAAAA,OAAO,EAAE;AACLR,QAAAA,KAAK,EAAEX,GAAG,CAAC,gEAAD,CADL;AAELY,QAAAA,EAAE,EAAE;AAACC,UAAAA,SAAS,EAAE;AAAZ;AAFC,OAjBL;AAqBJO,MAAAA,QAAQ,EAAE;AACNT,QAAAA,KAAK,EAAEX,GAAG,CAAC,oDAAD,CADJ;AAENY,QAAAA,EAAE,EAAE;AAACC,UAAAA,SAAS,EAAE;AAAZ;AAFE,OArBN;AAyBJQ,MAAAA,QAAQ,EAAE;AACNV,QAAAA,KAAK,EAAEX,GAAG,CAAC,4CAAD,CADJ;AAENY,QAAAA,EAAE,EAAE;AAACC,UAAAA,SAAS,EAAE;AAAZ;AAFE,OAzBN;AA6BJS,MAAAA,QAAQ,EAAE;AACNX,QAAAA,KAAK,EAAEX,GAAG,CAAC,uBAAD,CADJ;AAENY,QAAAA,EAAE,EAAE;AAACC,UAAAA,SAAS,EAAE;AAAZ;AAFE,OA7BN;AAiCJU,MAAAA,QAAQ,EAAE;AACNZ,QAAAA,KAAK,EAAEX,GAAG,CAAC,oBAAD,CADJ;AAENY,QAAAA,EAAE,EAAE;AAACC,UAAAA,SAAS,EAAE;AAAZ;AAFE,OAjCN;AAqCJW,MAAAA,IAAI,EACJ;AAACrB,QAAAA,IAAI,EAAE;AAAP;AAtCI;AAFJ,GAAR;AA2CH;;AAED,SAASsB,QAAT,GAA8D;AAC1D,SAAQ,EAAR;AAEG;;AAEP,MAAMC,QAAQ,GAAG,sCAAjB;AACA,MAAMC,OAAO,GAAG,oDAAhB;;AACA,MAAMC,UAAU,GAAI3B,IAAD,IACf4B,KAAK,CAAC,IAAIC,OAAJ,CAAYJ,QAAQ,GAAGC,OAAvB,EAAgC;AAClCI,EAAAA,MAAM,EAAE,MAD0B;AAElCC,EAAAA,OAAO,EAAE;AAAE,cAAU;AAAZ,GAFyB;AAES;AAC3CC,EAAAA,IAAI,yBAAehC,IAAf;AAH8B,CAAhC,CAAD,CAAL,CAKKiC,IALL,CAKUC,IAAI,IAAIA,IAAI,CAACC,IAAL,EALlB,CADJ;;AAQA,MAAMC,OAA8E,GAAG;AACnF,UAAQ;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAD2E;AAEnF,oBAAkB;AAAEA,IAAAA,MAAM,EAAE;AAAV,GAFiE;AAGnF,UAAQ;AAAEA,IAAAA,MAAM,EAAE;AAAV,GAH2E;AAInF,kBAAgB;AAAEA,IAAAA,MAAM,EAAE;AAAV,GAJmE;AAKnF,WAAS;AAAEA,IAAAA,MAAM,EAAE;AAAV,GAL0E;AAMnF,kBAAgB;AAAEA,IAAAA,MAAM,EAAE;AAAV,GANmE;AAOnF,aAAW;AAAEA,IAAAA,MAAM,EAAE;AAAV,GAPwE;AAQnF,qBAAmB;AAAEA,IAAAA,MAAM,EAAE;AAAV,GARgE;AASnF,WAAS;AAAEA,IAAAA,MAAM,EAAE;AAAV,GAT0E;AAUnF,SAAO;AAAEA,IAAAA,MAAM,EAAE;AAAV,GAV4E;AAWnF,qBAAmB;AAAEA,IAAAA,MAAM,EAAE;AAAV,GAXgE;AAYnF,WAAS;AAAEA,IAAAA,MAAM,EAAE;AAAV,GAZ0E;AAanF,yBAAuB;AAAEA,IAAAA,MAAM,EAAE;AAAV,GAb4D;AAenF,eAAa;AAACC,IAAAA,GAAG,EAAE;AAAN,GAfsE;AAgBnF,YAAU;AAACA,IAAAA,GAAG,EAAE;AAAN,GAhByE;AAiBnF,gBAAc;AAACA,IAAAA,GAAG,EAAE;AAAN,GAjBqE;AAkBnF,aAAW;AAACA,IAAAA,GAAG,EAAE;AAAN,GAlBwE;AAmBnF,kBAAgB;AAACA,IAAAA,GAAG,EAAE;AAAN,GAnBmE;AAoBnF,eAAa;AAACA,IAAAA,GAAG,EAAE;AAAN,GApBsE;AAqBnF,iBAAe;AAACA,IAAAA,GAAG,EAAE;AAAN,GArBoE;AAsBnF,cAAY;AAACA,IAAAA,GAAG,EAAE;AAAN,GAtBuE;AAuBnF,eAAa;AAACA,IAAAA,GAAG,EAAE;AAAN,GAvBsE;AAwBnF,YAAU;AAACA,IAAAA,GAAG,EAAE;AAAN,GAxByE;AAyBnF,iBAAe;AAACA,IAAAA,GAAG,EAAE;AAAN,GAzBoE;AA0BnF,cAAY;AAACA,IAAAA,GAAG,EAAE;AAAN,GA1BuE;AA2BnF,eAAa;AAACA,IAAAA,GAAG,EAAE;AAAN,GA3BsE;AA4BnF,YAAU;AAACA,IAAAA,GAAG,EAAE;AAAN,GA5ByE;AA8BnF,QAAM;AAAEC,IAAAA,IAAI,EAAE;AAAR,GA9B6E;AA+BnF,WAAS;AAAEA,IAAAA,IAAI,EAAE;AAAR,GA/B0E;AAgCnF,SAAO;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAhC4E;AAiCnF,YAAU;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAjCyE;AAkCnF,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAlC6E;AAmCnF,YAAU;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAnCyE;AAoCnF,WAAS;AAAEA,IAAAA,IAAI,EAAE;AAAR,GApC0E;AAqCnF,eAAa;AAAEA,IAAAA,IAAI,EAAE;AAAR,GArCsE;AAsCnF,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAtC6E;AAuCnF,YAAU;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAvCyE;AAwCnF,WAAS;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAxC0E;AAyCnF,eAAa;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAzCsE;AA0CnF,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GA1C6E;AA2CnF,cAAY;AAAEA,IAAAA,IAAI,EAAE;AAAR,GA3CuE;AA4CnF,WAAS;AAAEA,IAAAA,IAAI,EAAE;AAAR,GA5C0E;AA6CnF,iBAAe;AAAEA,IAAAA,IAAI,EAAE;AAAR,GA7CoE;AA8CnF,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GA9C6E;AA+CnF,cAAY;AAAEA,IAAAA,IAAI,EAAE;AAAR,GA/CuE;AAgDnF,WAAS;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAhD0E;AAiDnF,iBAAe;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAjDoE;AAkDnF,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAlD6E;AAmDnF,aAAW;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAnDwE;AAoDnF,WAAS;AAAEA,IAAAA,IAAI,EAAE;AAAR,GApD0E;AAqDnF,gBAAc;AAAEA,IAAAA,IAAI,EAAE;AAAR,GArDqE;AAsDnF,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAtD6E;AAuDnF,aAAW;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAvDwE;AAwDnF,WAAS;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAxD0E;AAyDnF,gBAAc;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAzDqE;AA0DnF,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GA1D6E;AA2DnF,eAAa;AAAEA,IAAAA,IAAI,EAAE;AAAR,GA3DsE;AA4DnF,WAAS;AAAEA,IAAAA,IAAI,EAAE;AAAR,GA5D0E;AA6DnF,kBAAgB;AAAEA,IAAAA,IAAI,EAAE;AAAR,GA7DmE;AA8DnF,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GA9D6E;AA+DnF,cAAY;AAAEA,IAAAA,IAAI,EAAE;AAAR,GA/DuE;AAgEnF,WAAS;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAhE0E;AAiEnF,iBAAe;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAjEoE;AAkEnF,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAlE6E;AAmEnF,cAAY;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAnEuE;AAoEnF,WAAS;AAAEA,IAAAA,IAAI,EAAE;AAAR,GApE0E;AAqEnF,iBAAe;AAAEA,IAAAA,IAAI,EAAE;AAAR,GArEoE;AAsEnF,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAtE6E;AAuEnF,YAAU;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAvEyE;AAwEnF,WAAS;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAxE0E;AAyEnF,eAAa;AAAEA,IAAAA,IAAI,EAAE;AAAR;AAzEsE,CAAvF;AA6EA,MAAMC,eAAqG,GAAG;AAC1G,SAAO;AAACC,IAAAA,SAAS,EAAEC,OAAO,CAAC,IAAD;AAAnB,GADmG;AAE1G,eAAa;AAACD,IAAAA,SAAS,EAAEC,OAAO,CAAC,IAAD;AAAnB,GAF6F;AAG1G,UAAQ;AAACD,IAAAA,SAAS,EAAEC,OAAO,CAAC,IAAD;AAAnB,GAHkG;AAI1G,gBAAc;AAACD,IAAAA,SAAS,EAAEC,OAAO,CAAC,IAAD;AAAnB,GAJ4F;AAK1G,gBAAc;AAACD,IAAAA,SAAS,EAAEC,OAAO,CAAC,IAAD;AAAnB,GAL4F;AAM1G,QAAM;AAACC,IAAAA,YAAY,EAAED,OAAO,CAAC,KAAD;AAAtB,GANoG;AAO1G,YAAU;AAACC,IAAAA,YAAY,EAAED,OAAO,CAAC,KAAD;AAAtB,GAPgG;AAQ1G,oBAAkB;AAACC,IAAAA,YAAY,EAAED,OAAO,CAAC,KAAD;AAAtB,GARwF;AAS1G,WAAS;AAACC,IAAAA,YAAY,EAAED,OAAO,CAAC,KAAD;AAAtB,GATiG;AAU1G,WAAS;AAACE,IAAAA,SAAS,EAAE;AAAZ,GAViG;AAW1G,aAAW;AAACA,IAAAA,SAAS,EAAE;AAAZ,GAX+F;AAY1G,kBAAgB;AAACA,IAAAA,SAAS,EAAE;AAAZ,GAZ0F;AAa1G,cAAY;AAACA,IAAAA,SAAS,EAAE;AAAZ;AAb8F,CAA9G;AAgBA,OAAO,MAAMC,SAAmD,GAAI;AAEhEtC,EAAAA,OAAO,EAAE,aAFuD;AAGhEC,EAAAA,MAAM,EAAE;AACJsC,IAAAA,WAAW,EAAC;AACRC,MAAAA,EAAE,EAAE,gBADI;AAERpC,MAAAA,EAAE,EAAE;AACAqC,QAAAA,KAAK,EAAE;AADP;AAFI,KADR;AAOJC,IAAAA,WAAW,EAAC;AACR1C,MAAAA,OAAO,EAAE,QADD;AAERI,MAAAA,EAAE,EAAC;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAFK;AAIRJ,MAAAA,MAAM,EAAC;AACHC,QAAAA,MAAM,EAAC;AACHC,UAAAA,KAAK,EAAEX,GAAG,CAAC,8BAAD;AADP;AADJ;AAJC,KAPR;AAiBAmD,IAAAA,GAAG;AACC3C,MAAAA,OAAO,EAAE,QADV;AAECI,MAAAA,EAAE,EAAE;AACAwC,QAAAA,UAAU,EAAE,CAAC;AACTC,UAAAA,IAAI,EAAGC,OAAD,IAAa,aAAajB,OAAO,CAACiB,OAAO,CAACC,SAAT,CAAP,IAA8B,EAA3C,CADV;AAETC,UAAAA,OAAO,EAAEzD,MAAM,CAAEuD,OAAD,IAAa;AAAE,mBAAO;AAAEhB,cAAAA,MAAM,EAAED,OAAO,CAACiB,OAAO,CAACC,SAAT,CAAP,CAA2BjB;AAArC,aAAP;AAAsD,WAAtE,CAFN;AAGTmB,UAAAA,MAAM,EAAE;AAHC,SAAD,EAKZ;AAAEA,UAAAA,MAAM,EAAE;AAAV,SALY,CADZ;AAOAC,QAAAA,QAAQ,EAAE,UAPV;AAQAC,QAAAA,QAAQ,EAAE,UARV;AASAC,QAAAA,QAAQ,EAAE,UATV;AAUAC,QAAAA,QAAQ,EAAE;AAVV;AAFL,OAcIvD,uBAAuB,CAAC,2BAAD,CAd3B,CAjBH;AAiCAiC,IAAAA,GAAG,EAAE;AACD/B,MAAAA,OAAO,EAAE,QADR;AAEDI,MAAAA,EAAE,EAAE;AACAwC,QAAAA,UAAU,EAAE,CAAC;AACTC,UAAAA,IAAI,EAAGC,OAAD,IAAa,UAAUjB,OAAO,CAACiB,OAAO,CAACC,SAAT,CAAP,IAA8B,EAAxC,CADV;AAETC,UAAAA,OAAO,EAAEzD,MAAM,CAAEuD,OAAD,IAAa;AAAC,mBAAM;AAAEf,cAAAA,GAAG,EAAEF,OAAO,CAACiB,OAAO,CAACC,SAAT,CAAP,CAA2BhB;AAAlC,aAAN;AAA6C,WAA5D,CAFN;AAGTkB,UAAAA,MAAM,EAAE;AAHC,SAAD,EAKZ;AAACA,UAAAA,MAAM,EAAE;AAAT,SALY;AADZ,OAFH;AAUDhD,MAAAA,MAAM,EAAE;AACJC,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAEb,IAAI,CAAEwD,OAAD,KAAc;AACtBnD,YAAAA,IAAI,EAAE,OADgB;AAEtBC,YAAAA,KAAK,gBAASkD,OAAO,CAAChB,MAAjB;AAFiB,WAAd,CAAD,CADP;AAIJ1B,UAAAA,EAAE,EAAE;AAACC,YAAAA,SAAS,EAAE;AAAZ;AAJA,SADJ;AAOJiD,QAAAA,GAAG,EAAE;AACDnD,UAAAA,KAAK,EAAEN,MAAM;AADZ,SAPD;AAUJc,QAAAA,OAAO,EAAE;AACLR,UAAAA,KAAK,EAAEX,GAAG,CAAC,0CAAD,CADL;AAELY,UAAAA,EAAE,EAAE;AAACC,YAAAA,SAAS,EAAE;AAAZ;AAFC;AAVL;AAVP,KAjCL;AA2DAkD,IAAAA,MAAM,EAAE;AACJvD,MAAAA,OAAO,EAAE,QADL;AAEJI,MAAAA,EAAE,EAAE;AACAwC,QAAAA,UAAU,EAAE,CAAC;AACTC,UAAAA,IAAI,EAAGC,OAAD,IAAa,gBAAgBb,eAAe,CAACa,OAAO,CAACC,SAAT,CAAf,IAAsC,EAAtD,CADV;AAETE,UAAAA,MAAM,EAAE;AAFC,SAAD,EAIR;AAACJ,UAAAA,IAAI,EAAGC,OAAD,IAAa,mBAAmBb,eAAe,CAACa,OAAO,CAACC,SAAT,CAAf,IAAsC,EAAzD,CAApB;AACAE,UAAAA,MAAM,EAAE;AADR,SAJQ,EAOR;AAACJ,UAAAA,IAAI,EAAGC,OAAD,IAAa,gBAAgBb,eAAe,CAACa,OAAO,CAACC,SAAT,CAAf,IAAsC,EAAtD,CAApB;AACAE,UAAAA,MAAM,EAAE;AADR,SAPQ,EAUZ;AAACA,UAAAA,MAAM,EAAC;AAAR,SAVY;AADZ,OAFA;AAgBJhD,MAAAA,MAAM,EAAE;AACJC,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAEX,GAAG,CAAC,6BAAD,CADN;AAEJY,UAAAA,EAAE,EAAE;AAACC,YAAAA,SAAS,EAAE;AAAZ;AAFA,SADJ;AAKJiD,QAAAA,GAAG,EAAE;AACDnD,UAAAA,KAAK,EAAEN,MAAM;AADZ,SALD;AAQJc,QAAAA,OAAO,EAAE;AACLR,UAAAA,KAAK,EAAEX,GAAG,CAAC,4CAAD,CADL;AAETY,UAAAA,EAAE,EAAE;AAACC,YAAAA,SAAS,EAAE;AAAZ;AAFK,SARL;AAYJmD,QAAAA,QAAQ,EAAE;AACNrD,UAAAA,KAAK,EAAEX,GAAG,CAAC,0BAAD,CADJ;AAEVY,UAAAA,EAAE,EAAE;AAACC,YAAAA,SAAS,EAAE;AAAZ;AAFM;AAZN;AAhBJ,KA3DR;AA6FA2B,IAAAA,IAAI,EAAE;AACFhC,MAAAA,OAAO,EAAE,QADP;AAEFI,MAAAA,EAAE,EAAE;AACAwC,QAAAA,UAAU,EAAE,CAAC;AACTC,UAAAA,IAAI,EAAGC,OAAD,IAAa,WAAWjB,OAAO,CAACiB,OAAO,CAACC,SAAT,CAAP,IAA8B,EAAzC,CADV;AAETC,UAAAA,OAAO,EAAEzD,MAAM,CAAEuD,OAAD,IAAa;AAAC,mBAAM;AAAEd,cAAAA,IAAI,EAAEH,OAAO,CAACiB,OAAO,CAACC,SAAT,CAAP,CAA2Bf;AAAnC,aAAN;AAA+C,WAA9D,CAFN;AAGTiB,UAAAA,MAAM,EAAE;AAHC,SAAD,EAKZ;AACAA,UAAAA,MAAM,EAAE;AADR,SALY;AADZ,OAFF;AAYFhD,MAAAA,MAAM,EAAE;AACJC,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAEX,GAAG,CAAC,4BAAD,CADN;AAEJY,UAAAA,EAAE,EAAE;AAACC,YAAAA,SAAS,EAAE;AAAZ;AAFA,SADJ;AAKJiD,QAAAA,GAAG,EAAE;AACDnD,UAAAA,KAAK,EAAEN,MAAM;AADZ,SALD;AAQJc,QAAAA,OAAO,EAAE;AACLR,UAAAA,KAAK,EAAEX,GAAG,CAAC,0CAAD,CADL;AAELY,UAAAA,EAAE,EAAE;AAACC,YAAAA,SAAS,EAAE;AAAZ;AAFC;AARL;AAZN,KA7FN;AAsHAoD,IAAAA,SAAS,EAAE;AACPzD,MAAAA,OAAO,EAAE,QADF;AAEPI,MAAAA,EAAE,EAAE;AACAwC,QAAAA,UAAU,EAAE,CAAC;AACTC,UAAAA,IAAI,EAAGC,OAAD,IAAa,gBAAgBb,eAAe,CAACa,OAAO,CAACC,SAAT,CAAf,IAAsC,EAAtD,CADV;AAETE,UAAAA,MAAM,EAAE;AAFC,SAAD,EAGR;AACAJ,UAAAA,IAAI,EAAGC,OAAD,IAAa,mBAAmBb,eAAe,CAACa,OAAO,CAACC,SAAT,CAAf,IAAsC,EAAzD,CADnB;AAEAE,UAAAA,MAAM,EAAE;AAFR,SAHQ,EAOZ;AAACA,UAAAA,MAAM,EAAE;AAAT,SAPY;AADZ,OAFG;AAYPhD,MAAAA,MAAM,EAAC;AACHC,QAAAA,MAAM,EAAC;AACHC,UAAAA,KAAK,EAAEb,IAAI,CAAEwD,OAAD,KAAc;AACtBnD,YAAAA,IAAI,EAAE,OADgB;AAEtBC,YAAAA,KAAK,yDAAiDkD,OAAO,CAAChB,MAAzD,iBAAsEgB,OAAO,CAACf,GAA9E;AAFiB,WAAd,CAAD,CADR;AAIH3B,UAAAA,EAAE,EAAE;AAACC,YAAAA,SAAS,EAAE;AAAZ;AAJD,SADJ;AAQHiD,QAAAA,GAAG,EAAE;AACDnD,UAAAA,KAAK,EAAEN,MAAM;AADZ,SARF;AAWH6D,QAAAA,QAAQ,EAAE;AACNvD,UAAAA,KAAK,EAAEX,GAAG,CAAC,oCAAD,CADJ;AAENY,UAAAA,EAAE,EAAE;AAACC,YAAAA,SAAS,EAAE;AAAZ;AAFE,SAXP;AAgBHM,QAAAA,OAAO,EAAE;AACLR,UAAAA,KAAK,EAAEX,GAAG,CAAC,0CAAD,CADL;AAELY,UAAAA,EAAE,EAAE;AAACC,YAAAA,SAAS,EAAE;AAAZ;AAFC;AAhBN;AAZA,KAtHX;AAuJAsD,IAAAA,UAAU,EAAE;AACR3D,MAAAA,OAAO,EAAE,QADD;AAERI,MAAAA,EAAE,EAAE;AACAwC,QAAAA,UAAU,EAAE,CAAC;AACTC,UAAAA,IAAI,EAAGC,OAAD,IAAa,gBAAgBb,eAAe,CAACa,OAAO,CAACC,SAAT,CAAf,IAAsC,EAAtD,CADV;AAETE,UAAAA,MAAM,EAAE;AAFC,SAAD,EAGR;AACAJ,UAAAA,IAAI,EAAGC,OAAD,IAAa,mBAAmBb,eAAe,CAACa,OAAO,CAACC,SAAT,CAAf,IAAsC,EAAzD,CADnB;AAEAE,UAAAA,MAAM,EAAE;AAFR,SAHQ,EAMR;AAACJ,UAAAA,IAAI,EAAGC,OAAD,IAAa,aAAab,eAAe,CAACa,OAAO,CAACC,SAAT,CAAf,IAAsC,EAAnD,CAApB;AACAE,UAAAA,MAAM,EAAE;AADR,SANQ,EAQZ;AAACA,UAAAA,MAAM,EAAE;AAAT,SARY;AADZ,OAFI;AAaRhD,MAAAA,MAAM,EAAC;AACHC,QAAAA,MAAM,EAAC;AACHC,UAAAA,KAAK,EAAEb,IAAI,CAAEwD,OAAD,KAAc;AACtBnD,YAAAA,IAAI,EAAE,OADgB;AAEtBC,YAAAA,KAAK,yDAAiDkD,OAAO,CAAChB,MAAzD,iBAAsEgB,OAAO,CAACf,GAA9E,iBAAwFe,OAAO,CAACd,IAAhG;AAFiB,WAAd,CAAD,CADR;AAIC5B,UAAAA,EAAE,EAAE;AAACC,YAAAA,SAAS,EAAE;AAAZ;AAJL,SADJ;AAOHqD,QAAAA,QAAQ,EAAE;AACNvD,UAAAA,KAAK,EAAEX,GAAG,CAAC,sCAAD,CADJ;AAENY,UAAAA,EAAE,EAAE;AAACC,YAAAA,SAAS,EAAE;AAAZ;AAFE,SAPP;AAWHiD,QAAAA,GAAG,EAAE;AACDnD,UAAAA,KAAK,EAAEN,MAAM;AADZ,SAXF;AAcH2D,QAAAA,QAAQ,EAAC;AACLrD,UAAAA,KAAK,EAAEX,GAAG,CAAC,0BAAD,CADL;AAELY,UAAAA,EAAE,EAAE;AAACC,YAAAA,SAAS,EAAE;AAAZ;AAFC,SAdN;AAkBHM,QAAAA,OAAO,EAAE;AACLR,UAAAA,KAAK,EAAEX,GAAG,CAAC,0CAAD,CADL;AAELY,UAAAA,EAAE,EAAE;AAACC,YAAAA,SAAS,EAAE;AAAZ;AAFC;AAlBN;AAbC,KAvJZ;AA0LAuD,IAAAA,YAAY,EAAE;AACV5D,MAAAA,OAAO,EAAE,QADC;AAEVI,MAAAA,EAAE,EAAE;AACCwC,QAAAA,UAAU,EAAE,CAAC;AACVC,UAAAA,IAAI,EAAGC,OAAD,IAAa,gBAAgBb,eAAe,CAACa,OAAO,CAACC,SAAT,CAAf,IAAsC,EAAtD,CADT;AAEVE,UAAAA,MAAM,EAAE;AAFE,SAAD,EAGT;AACAJ,UAAAA,IAAI,EAAGC,OAAD,IAAa,mBAAmBb,eAAe,CAACa,OAAO,CAACC,SAAT,CAAf,IAAsC,EAAzD,CADnB;AAEAE,UAAAA,MAAM,EAAE;AAFR,SAHS,EAMT;AACAJ,UAAAA,IAAI,EAAGC,OAAD,IAAa,aAAab,eAAe,CAACa,OAAO,CAACC,SAAT,CAAf,IAAsC,EAAnD,CADnB;AAEAE,UAAAA,MAAM,EAAE;AAFR,SANS,EAUb;AAACA,UAAAA,MAAM,EAAE;AAAT,SAVa;AADb,OAFM;AAeVhD,MAAAA,MAAM,EAAE;AACJC,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAEX,GAAG,CAAC,kFAAD,CADN;AAEJY,UAAAA,EAAE,EAAE;AAACC,YAAAA,SAAS,EAAE;AAAZ;AAFA,SADJ;AAKJiD,QAAAA,GAAG,EAAE;AAACnD,UAAAA,KAAK,EAAEN,MAAM;AAAd,SALD;AAOJc,QAAAA,OAAO,EAAC;AACJR,UAAAA,KAAK,EAAEX,GAAG,CAAC,2BAAD;AADN,SAPJ;AAUJgE,QAAAA,QAAQ,EAAC;AACLrD,UAAAA,KAAK,EAAEX,GAAG,CAAC,yBAAD,CADL;AAELY,UAAAA,EAAE,EAAE;AAACC,YAAAA,SAAS,EAAE;AAAZ;AAFC;AAVL;AAfE;AA1Ld;AAHwD,CAA7D","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\r\n\r\n\r\nexport function say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nexport function listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\nfunction say_ask_nomatch_timeout(say_this: string): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({\r\n        initial: 'prompt',\r\n        states: {\r\n            prompt: {\r\n                entry: say(say_this),\r\n                on: { ENDSPEECH: 'ask1' }\r\n            },\r\n            ask1: {\r\n                entry: [send('LISTEN'), send ('TIMEOUT1', {delay: 4500})]\r\n            },\r\n            ask2: {\r\n                entry: [send('LISTEN'), send ('TIMEOUT2', {delay: 5500})]\r\n            },\r\n            ask3: {\r\n                entry: [send('LISTEN'), send ('TIMEOUT3', {delay: 6500})]\r\n            },\r\n            ask4: {\r\n                entry: [send('LISTEN'), send ('TIMEOUT4', {delay: 5000})]\r\n            },\r\n            nomatch: {\r\n                entry: say('Sorry, I did not manage to understand this one. Please repeat.'),\r\n                on: {ENDSPEECH: \"ask2\"}\r\n            },\r\n            timeout1: {\r\n                entry: say('I did not hear you this time, please speak louder.'),\r\n                on: {ENDSPEECH: \"ask2\"},\r\n            },\r\n            timeout2: {\r\n                entry: say('I still cannot hear you, please try again.'),\r\n                on: {ENDSPEECH: \"ask3\"},\r\n            },\r\n            timeout3: {\r\n                entry: say('Sorry, still nothing.'),\r\n                on: {ENDSPEECH: \"ask4\"}\r\n            },\r\n            timeout4: {\r\n                entry: say('Returning to idle.'),\r\n                on: {ENDSPEECH: \"idle\"}\r\n            },\r\n            idle:\r\n            {type: 'final'}\r\n        }\r\n    })\r\n}\r\n\r\nfunction timeouts(): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({\r\n        \r\n    })}\r\n\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://rafalappointment.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json()); \r\n\r\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\r\n    \"John\": { person: \"John Appleseed\" },\r\n    \"John Appleseed\": { person: \"John Appleseed\" },\r\n    \"Jack\": { person: \"Jack Jackson\" },\r\n    \"Jack Jackson\": { person: \"Jack Jackson\" },\r\n    \"Liana\": { person: \"Liana Jelena\" },\r\n    \"Liana Jelena\": { person: \"Liana Jelena\" },\r\n    \"Natalie\": { person: \"Natalie Portman\" },\r\n    \"Natalie Portman\": { person: \"Natalie Portman\" },\r\n    \"Bruce\": { person: \"Bruce W\" },\r\n    \"Bob\": { person: \"Bob the builder\" },\r\n    \"Bob the builder\": { person: \"Bob the builder\" },\r\n    \"Shrek\": { person: \"Shrek from the swamp\" },\r\n    \"Shrek from the swap\": { person: \"Shrek from the swamp\" },\r\n\r\n    \"on Monday\": {day: \"Monday\" },\r\n    \"Monday\": {day: \"Monday\" },\r\n    \"on Tuesday\": {day: \"Tuesday\" },\r\n    \"Tuesday\": {day: \"Tuesday\" },\r\n    \"on Wednesday\": {day: \"Wednesday\" },\r\n    \"Wednesday\": {day: \"Wednesday\" },\r\n    \"on Thursday\": {day: \"Thursday\" },\r\n    \"Thursday\": {day: \"Thursday\" },\r\n    \"on Friday\": {day: \"Friday\" },\r\n    \"Friday\": {day: \"Friday\" },\r\n    \"on Satudary\": {day: \"Satuday\" },\r\n    \"Satudary\": {day: \"Satuday\" },\r\n    \"on Sunday\": {day: \"Sunday\" },\r\n    \"Sunday\": {day: \"Sunday\" },\r\n\r\n    \"10\": { time: \"10:00\" },\r\n    \"at 10\": { time: \"10:00\" },\r\n    \"ten\": { time: \"10:00\" },\r\n    \"at ten\": { time: \"10:00\" },\r\n    \"11\": { time: \"11:00\" },\r\n    \"eleven\": { time: \"11:00\" },\r\n    \"at 11\": { time: \"11:00\" },\r\n    \"at eleven\": { time: \"11:00\" },\r\n    \"12\": { time: \"12:00\" },\r\n    \"twelve\": { time: \"12:00\" },\r\n    \"at 12\": { time: \"12:00\" },\r\n    \"at twelve\": { time: \"12:00\" },\r\n    \"13\": { time: \"13:00\" },\r\n    \"thirteen\": { time: \"13:00\" },\r\n    \"at 13\": { time: \"13:00\" },\r\n    \"at thirteen\": { time: \"13:00\" },\r\n    \"14\": { time: \"14:00\" },\r\n    \"fourteen\": { time: \"14:00\" },\r\n    \"at 14\": { time: \"14:00\" },\r\n    \"at fourteen\": { time: \"14:00\" },\r\n    \"15\": { time: \"15:00\" },\r\n    \"fifteen\": { time: \"15:00\" },\r\n    \"at 15\": { time: \"15:00\" },\r\n    \"at fifteen\": { time: \"15:00\" },\r\n    \"16\": { time: \"16:00\" },\r\n    \"sixteen\": { time: \"16:00\" },\r\n    \"at 16\": { time: \"16:00\" },\r\n    \"at sixteen\": { time: \"16:00\" },\r\n    \"17\": { time: \"17:00\" },\r\n    \"seventeen\": { time: \"17:00\" },\r\n    \"at 17\": { time: \"17:00\" },\r\n    \"at seventeen\": { time: \"17:00\" },\r\n    \"18\": { time: \"18:00\" },\r\n    \"eighteen\": { time: \"18:00\" },\r\n    \"at 18\": { time: \"18:00\" },\r\n    \"at eighteen\": { time: \"18:00\" },\r\n    \"19\": { time: \"19:00\" },\r\n    \"nineteen\": { time: \"19:00\" },\r\n    \"at 19\": { time: \"19:00\" },\r\n    \"at nineteen\": { time: \"19:00\" },\r\n    \"20\": { time: \"20:00\" },\r\n    \"twenty\": { time: \"20:00\" },\r\n    \"at 20\": { time: \"20:00\" },\r\n    \"at twenty\": { time: \"20:00\" },\r\n\r\n}\r\n\r\nconst boolean_grammar: {[index: string]: {agreement?: boolean, disagreement?: boolean, uncertain?: string}} = {\r\n    \"yes\": {agreement: Boolean(true)},\r\n    \"of course\": {agreement: Boolean(true)},\r\n    \"sure\": {agreement: Boolean(true)},\r\n    \"absolutely\": {agreement: Boolean(true)},\r\n    \"yes please\": {agreement: Boolean(true)},\r\n    \"no\": {disagreement: Boolean(false)},\r\n    \"no way\": {disagreement: Boolean(false)},\r\n    \"absolutely not\": {disagreement: Boolean(false)},\r\n    \"never\": {disagreement: Boolean(false)},\r\n    \"maybe\": {uncertain: \"unsure\"},\r\n    \"perhaps\": {uncertain: \"unsure\"},\r\n    \"I don't know\": {uncertain: \"unsure\"},\r\n    \"probably\": {uncertain: \"unsure\"},\r\n}\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    \r\n    initial: 'start_point',\r\n    states: {\r\n        start_point:{\r\n            id: 'starting_poing',\r\n            on: {\r\n                CLICK: 'appointment'\r\n            }\r\n        },\r\n        appointment:{\r\n            initial: 'prompt',\r\n            on:{ ENDSPEECH: 'who'\r\n            },\r\n            states:{\r\n                prompt:{\r\n                    entry: say(\"Let's create an appointment.\")\r\n                }\r\n            }\r\n        },\r\n            who: {\r\n                initial: \"prompt\",\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"person\" in (grammar[context.recResult] || {}),\r\n                        actions: assign((context) => { return { person: grammar[context.recResult].person } }),\r\n                        target: \"day\"},\r\n\r\n                    { target: \".nomatch\" }],\r\n                    TIMEOUT1: 'timeout1',\r\n                    TIMEOUT2: 'timeout2',\r\n                    TIMEOUT3: 'timeout3',\r\n                    TIMEOUT4: 'timeout4',\r\n                },\r\n                ...say_ask_nomatch_timeout('Who are you meeting with?')\r\n            },\r\n            day: {\r\n                initial: \"prompt\",\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"day\" in (grammar[context.recResult] || {}),\r\n                        actions: assign((context) => {return{ day: grammar[context.recResult].day}}),\r\n                        target: \"length\"\r\n                    },\r\n                    {target: \".nomatch\"}]\r\n                },\r\n                states: {\r\n                    prompt: {\r\n                        entry: send((context) => ({\r\n                            type: \"SPEAK\",\r\n                            value: `OK. ${context.person}. On which day is your meeting?`})),\r\n                        on: {ENDSPEECH: \"ask\"}\r\n                        },\r\n                    ask: {\r\n                        entry: listen()\r\n                    },\r\n                    nomatch: {\r\n                        entry: say(\"Sorry, I don't understand. Please repeat\"),\r\n                        on: {ENDSPEECH: \"ask\"}\r\n                    }\r\n                }\r\n            },\r\n            length: {\r\n                initial: \"prompt\" ,\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        target: \"whole_day\"},\r\n\r\n                        {cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        target: \"time\"},\r\n\r\n                        {cond: (context) => \"uncertain\" in (boolean_grammar[context.recResult] || {}),\r\n                        target: \".specific\"},\r\n\r\n                    {target:\".nomatch\"}]\r\n\r\n                    },\r\n                states: {\r\n                    prompt: {\r\n                        entry: say(\"Will it take the whole day?\"),\r\n                        on: {ENDSPEECH: \"ask\"}\r\n                    },\r\n                    ask: {\r\n                        entry: listen()\r\n                    },\r\n                    nomatch: {\r\n                        entry: say(\"Sorry, I did not understand you this time.\"),\r\n                    on: {ENDSPEECH: \"ask\"}\r\n                    },\r\n                    specific: {\r\n                        entry: say(\"please be more specific.\"),\r\n                    on: {ENDSPEECH: \"ask\"},\r\n                    }\r\n                }\r\n            },\r\n            time: {\r\n                initial: \"prompt\" ,\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n                        actions: assign((context) => {return{ time: grammar[context.recResult].time}}),\r\n                        target: \"repetition\"\r\n                        },\r\n                    {\r\n                    target: \".nomatch\"\r\n                    }]\r\n                },\r\n                states: {\r\n                    prompt: {\r\n                        entry: say(\"What time is your meeting?\"),\r\n                        on: {ENDSPEECH: \"ask\"}\r\n                    },\r\n                    ask: {\r\n                        entry: listen()\r\n                    },\r\n                    nomatch: {\r\n                        entry: say(\"Sorry, I don't understand. Please repeat\"),\r\n                        on: {ENDSPEECH: \"ask\"}}\r\n                    }\r\n            },\r\n            whole_day: {\r\n                initial: \"prompt\" ,\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        target: \"confirmation\"},\r\n                        {\r\n                        cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        target: \".canceled\"},\r\n\r\n                    {target: \".nomatch\"}]\r\n                },\r\n                states:{\r\n                    prompt:{\r\n                        entry: send((context) => ({\r\n                            type: \"SPEAK\",\r\n                            value:`Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`})),\r\n                        on: {ENDSPEECH: \"ask\"}\r\n\r\n                    },\r\n                    ask: {\r\n                        entry: listen()\r\n                    },\r\n                    canceled: {\r\n                        entry: say(\"The appointment has been canceled.\"),\r\n                        on: {ENDSPEECH: '#make_a_choice'}\r\n\r\n                    },\r\n                    nomatch: {\r\n                        entry: say(\"Sorry, I don't understand. Please repeat\"),\r\n                        on: {ENDSPEECH: \"ask\"}}\r\n                }\r\n            },\r\n            repetition: {\r\n                initial: \"prompt\" ,\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        target: \"confirmation\"},\r\n                        {\r\n                        cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        target: \".canceled\"},\r\n                        {cond: (context) => \"unsure\" in (boolean_grammar[context.recResult] || {}),\r\n                        target: \".specific\"},\r\n                    {target: \".nomatch\"}]\r\n                },\r\n                states:{\r\n                    prompt:{\r\n                        entry: send((context) => ({\r\n                            type: \"SPEAK\",\r\n                            value:`Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?`})),\r\n                            on: {ENDSPEECH: \"ask\"}\r\n                    },\r\n                    canceled: {\r\n                        entry: say(\"The appointment has been cancell\\ed.\"),\r\n                        on: {ENDSPEECH: '#make_a_choice'}\r\n                    },\r\n                    ask: {\r\n                        entry: listen()\r\n                    },\r\n                    specific:{\r\n                        entry: say(\"Please be more specific.\"),\r\n                        on: {ENDSPEECH: 'ask'}\r\n                    },\r\n                    nomatch: {\r\n                        entry: say(\"Sorry, I don't understand. Please repeat\"),\r\n                        on: {ENDSPEECH: \"ask\"}}}\r\n            },\r\n            confirmation: {\r\n                initial: \"prompt\" ,\r\n                on: {\r\n                     RECOGNISED: [{\r\n                        cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        target: \"to_do_item\"},\r\n                        {\r\n                        cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        target: \"#make_a_choice\"},\r\n                        {\r\n                        cond: (context) => \"unsure\" in (boolean_grammar[context.recResult] || {}),\r\n                        target: \".specific\"},\r\n\r\n                    {target: \".nomatch\"}]\r\n                },\r\n                states: {\r\n                    prompt: {\r\n                        entry: say(\"Your appointment has been created! Would you like to add it to your to do list? \"),\r\n                        on: {ENDSPEECH: 'ask'}\r\n                    },\r\n                    ask: {entry: listen(),\r\n                    },\r\n                    nomatch:{\r\n                        entry: say(\"Sorry, I did not get you.\")\r\n                    },\r\n                    specific:{\r\n                        entry: say(\"Please be more specific\"),\r\n                        on: {ENDSPEECH: 'ask'}\r\n                    }\r\n                }\r\n            },\r\n        }\r\n})"]},"metadata":{},"sourceType":"module"}