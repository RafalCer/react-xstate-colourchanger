{"ast":null,"code":"import _objectSpread from \"C:/Users/R/Desktop/DialogueSystems/Lab2/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign, actions } from \"xstate\";\nimport { loadGrammar } from './runparser';\nimport { parse } from './chartparser';\nimport { grammar } from './grammars/VGappointmentGrammar';\nconst gramm = loadGrammar(grammar);\n\nlet UsersCommand = recResult => {\n  const prs = parse(recResult.split(/\\s+/), gramm);\n  const result = prs.resultsForRule(gramm.$root)[0];\n  return [result.name, result.day, result.time, result.help, result.yes_no];\n};\n\n_c = UsersCommand;\nexport function say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\nexport function listen() {\n  return send('LISTEN');\n}\n\nfunction say_ask_nomatch_timeout(say_this, help_message) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say_this,\n        on: {\n          ENDSPEECH: 'ask1'\n        }\n      },\n      ask1: {\n        entry: [send('LISTEN'), send('TIMEOUT1', {\n          delay: 4500,\n          id: 'time1'\n        })]\n      },\n      ask2: {\n        entry: [send('LISTEN'), send('TIMEOUT2', {\n          delay: 4500,\n          id: 'time2'\n        })]\n      },\n      ask3: {\n        entry: [send('LISTEN'), send('TIMEOUT3', {\n          delay: 4500,\n          id: 'time3'\n        })]\n      },\n      ask4: {\n        entry: [send('LISTEN'), send('TIMEOUT4', {\n          delay: 4500,\n          id: 'time4'\n        })]\n      },\n      nomatch: {\n        entry: say('Sorry, I did not manage to understand this one. Please repeat.'),\n        on: {\n          ENDSPEECH: \"ask2\"\n        }\n      },\n      timeout1: {\n        entry: say('I did not hear you this time, please speak louder.'),\n        on: {\n          ENDSPEECH: \"ask2\"\n        }\n      },\n      timeout2: {\n        entry: say('I still cannot hear you, please try again.'),\n        on: {\n          ENDSPEECH: \"ask3\"\n        }\n      },\n      timeout3: {\n        entry: say('Sorry, still nothing.'),\n        on: {\n          ENDSPEECH: \"ask4\"\n        }\n      },\n      timeout4: {\n        //Add idle state after 3 reprompts//\n        entry: say('Returning to idle.'),\n        on: {\n          ENDSPEECH: \"idle\"\n        }\n      },\n      idle: {\n        type: 'final'\n      },\n      to_do: {\n        entry: say('Sorry, this tool has not been developed yet. I will now return to idle state.'),\n        on: {\n          ENDSPEECH: 'idle'\n        }\n      },\n      specific: {\n        entry: say(\"Please be more specific\"),\n        on: {\n          ENDSPEECH: \"ask2\"\n        }\n      },\n      canceled: {\n        entry: say(\"Your appointment has been canceled. I will now returnto idle state.\")\n      },\n      help: {\n        entry: say(help_message),\n        on: {\n          ENDSPEECH: \"ask2\"\n        }\n      }\n    }\n  };\n}\n\nconst cancel = actions.cancel;\nexport const dmMachine = {\n  initial: 'start_point',\n  states: {\n    start_point: {\n      id: 'starting_point',\n      on: {\n        CLICK: 'appointment'\n      }\n    },\n    appointment: {\n      initial: 'prompt',\n      on: {\n        ENDSPEECH: 'who'\n      },\n      states: {\n        prompt: {\n          entry: say(\"Let's create an appointment.\")\n        }\n      }\n    },\n    who: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => {\n            return {\n              AppointmentCommand: UsersCommand(context.recResult)\n            } !== undefined;\n          },\n          actions: [assign(context => {\n            return {\n              srgs_name: UsersCommand(context.recResult)[0]\n            };\n          }), assign(context => {\n            return {\n              srgs_day: UsersCommand(context.recResult)[1]\n            };\n          }), assign(context => {\n            return {\n              srgs_time: UsersCommand(context.recResult)[2]\n            };\n          }), assign(context => {\n            return {\n              srgs_help: UsersCommand(context.recResult)[3]\n            };\n          }), assign(context => {\n            return {\n              srgs_yes_no: UsersCommand(context.recResult)[4]\n            };\n          }), cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\n          target: 'who_processing'\n        }, {\n          cond: context => {\n            return {\n              AppointmentCommand: UsersCommand(context.recResult)\n            } === undefined;\n          },\n          target: \".nomatch\"\n        }],\n\n        /*\r\n                                {cond: (context) => UsersCommand(context.recResult)[0] !== \"None\" && //Name provided +++\r\n                                UsersCommand(context.recResult)[1] !== \"None\" &&  //Day provided +++\r\n                                 UsersCommand(context.recResult)[2] === \"None\" && //Time not provided ---\r\n                                 UsersCommand(context.recResult)[3] === \"None\" && //Not a help answer ---\r\n                                 UsersCommand(context.recResult)[4] === \"None\",//Not a yes_no answer ---\r\n                               actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                               target: \"length\"\r\n                               },\r\n         \r\n                               {cond: (context) => UsersCommand(context.recResult)[0] !== \"None\" && //Name provided +++\r\n                               UsersCommand(context.recResult)[1] === \"None\" &&  //Day not provided ---\r\n                                UsersCommand(context.recResult)[2] === \"None\" && //Time not provided ---\r\n                                UsersCommand(context.recResult)[3] === \"None\" && //Not a help answer ---\r\n                                UsersCommand(context.recResult)[4] === \"None\",//Not a yes_no answer ---\r\n                              actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                              target: \"day\"\r\n                              },\r\n         \r\n                              {cond: (context) => UsersCommand(context.recResult)[0] === \"None\" && //Name provided ----\r\n                              UsersCommand(context.recResult)[1] === \"None\" &&  //Day not provided ---\r\n                               UsersCommand(context.recResult)[2] === \"None\" && //Time not provided ---\r\n                               UsersCommand(context.recResult)[3] === \"help\" && //Help answer +++\r\n                               UsersCommand(context.recResult)[4] === \"None\",//Not a yes_no answer ---\r\n                             actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                             target: \".help\"\r\n                             }],\r\n        */\n        //{target: \".nomatch\" }],//\n        TIMEOUT1: '.timeout1',\n        TIMEOUT2: '.timeout2',\n        TIMEOUT3: '.timeout3',\n        TIMEOUT4: '.timeout4'\n      }\n    }, say_ask_nomatch_timeout(say('Who are you meeting with?'), \"Please specify the name of the person you are planning to meet up with. Pick someone from your contacts list.\")),\n    who_processing: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => UsersCommand(context.recResult)[0] !== \"None\" && //Name provided +++\n          UsersCommand(context.recResult)[1] !== \"None\" && //Day provided +++\n          UsersCommand(context.recResult)[2] !== \"None\" && //Time provided +++\n          UsersCommand(context.recResult)[3] === \"None\" && //Not a help answer ---\n          UsersCommand(context.recResult)[4] === \"None\",\n          //Not a yes_no answer ---\n          actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\n          target: \"repetition\"\n        }, {\n          cond: context => UsersCommand(context.recResult)[0] !== \"None\" && //Name provided +++\n          UsersCommand(context.recResult)[1] !== \"None\" && //Day provided +++\n          UsersCommand(context.recResult)[2] === \"None\" && //Time not provided ---\n          UsersCommand(context.recResult)[3] === \"None\" && //Not a help answer ---\n          UsersCommand(context.recResult)[4] === \"None\",\n          //Not a yes_no answer ---\n          actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\n          target: \"length\"\n        }, {\n          cond: context => UsersCommand(context.recResult)[0] !== \"None\" && //Name provided +++\n          UsersCommand(context.recResult)[1] === \"None\" && //Day not provided ---\n          UsersCommand(context.recResult)[2] === \"None\" && //Time not provided ---\n          UsersCommand(context.recResult)[3] === \"None\" && //Not a help answer ---\n          UsersCommand(context.recResult)[4] === \"None\",\n          //Not a yes_no answer ---\n          actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\n          target: \"day\"\n        }, {\n          cond: context => UsersCommand(context.recResult)[0] === \"None\" && //Name provided ----\n          UsersCommand(context.recResult)[1] === \"None\" && //Day not provided ---\n          UsersCommand(context.recResult)[2] === \"None\" && //Time not provided ---\n          UsersCommand(context.recResult)[3] === \"help\" && //Help answer +++\n          UsersCommand(context.recResult)[4] === \"None\",\n          //Not a yes_no answer ---\n          actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\n          target: \".help\"\n        }, {\n          target: \".nomatch\"\n        }],\n        TIMEOUT1: '.timeout1',\n        TIMEOUT2: '.timeout2',\n        TIMEOUT3: '.timeout3',\n        TIMEOUT4: '.timeout4'\n      }\n    }, say_ask_nomatch_timeout(say(\"a\"), \"a\")),\n    day: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: '#starting_point'\n      },\n      states: {\n        prompt: {\n          entry: say('Reached day')\n        }\n      }\n    },\n    length: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: '#starting_point'\n      },\n      states: {\n        prompt: {\n          entry: say('Reached length')\n        }\n      }\n    },\n    repetition: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: '#starting_point'\n      },\n      states: {\n        prompt: {\n          entry: say('Reached repetition')\n        }\n      }\n    }\n    /* day: {\r\n        initial: \"prompt\",\r\n        on: {\r\n            RECOGNISED: [{\r\n                cond: (context) => \"day\" in (grammar[context.recResult] || {}),\r\n                actions: [assign((context) => {return{ day: grammar[context.recResult].day}}), cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                target: \"length\"\r\n            },\r\n              {\r\n                cond: (context) => \"help\" in (grammar[context.recResult] || {}),\r\n                actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                target: \".help\"\r\n            },\r\n              {actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n            target: \".nomatch\"}],\r\n              TIMEOUT1: '.timeout1',\r\n            TIMEOUT2: '.timeout2',\r\n            TIMEOUT3: '.timeout3',\r\n            TIMEOUT4: '.timeout4'\r\n        },\r\n        ...say_ask_nomatch_timeout(say('On which day is your meating?'), \"You need to specify the day on which you meeting is to be held. Please pick a day of the week. \") //Can add name specification\r\n    },\r\n    length: {\r\n        initial: \"prompt\" ,\r\n        on: {\r\n            RECOGNISED: [{\r\n                cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                target: \"whole_day\"},\r\n                  {cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                target: \"time\"},\r\n                  {cond: (context) => \"uncertain\" in (boolean_grammar[context.recResult] || {}),\r\n                actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                target: \".specific\"},\r\n                  {cond: (context) => \"help\" in (grammar[context.recResult] || {}),\r\n                actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                target: \".help\"},\r\n              {actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                target:\".nomatch\"}],\r\n              TIMEOUT1: '.timeout1',\r\n            TIMEOUT2: '.timeout2',\r\n            TIMEOUT3: '.timeout3',\r\n            TIMEOUT4: '.timeout4'\r\n              },\r\n        \r\n            ...say_ask_nomatch_timeout(say('Will it take the whole day?'), \"You need to specify whether your meeting will take the whole day so that I can book it accordingly. Please answer with yes or no.\")\r\n    },\r\n    time: {\r\n        initial: \"prompt\" ,\r\n        on: {\r\n            RECOGNISED: [{\r\n              cond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n            actions: [assign((context) => {return{ time: grammar[context.recResult].time}}), cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n            target: \"repetition\"},\r\n              {cond: (context) => \"help\" in (grammar[context.recResult] || {}),\r\n            actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n            target: \".help\"},\r\n              {\r\n            actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n            target: \".nomatch\"\r\n            }],\r\n              TIMEOUT1: '.timeout1',\r\n            TIMEOUT2: '.timeout2',\r\n            TIMEOUT3: '.timeout3',\r\n            TIMEOUT4: '.timeout4'\r\n        },\r\n        ...say_ask_nomatch_timeout(say('At what time is your meeting?'), \"You need to specify the time when your meeting will start so that I can book it accordingly. Please tell me the time in military notation or, in other words, 24-hours format.\")\r\n    },\r\n    whole_day: {\r\n        initial: \"prompt\" ,\r\n        on: {\r\n            RECOGNISED: [{\r\n                cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                target: \"confirmation\"},\r\n                {\r\n                cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                target: \".canceled\"},\r\n                  {cond: (context) => \"help\" in (grammar[context.recResult] || {}),\r\n                actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                target: \".help\"},\r\n              {\r\n            actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n            target: \".nomatch\"}],\r\n              TIMEOUT1: '.timeout1',\r\n            TIMEOUT2: '.timeout2',\r\n            TIMEOUT3: '.timeout3',\r\n            TIMEOUT4: '.timeout4'\r\n        },\r\n        ...say_ask_nomatch_timeout(send((context) => ({\r\n            type: \"SPEAK\",\r\n            value: `Just to confirm, do you want me to make an appointment with ${context.person} on ${context.day} for the whole day?`})), \r\n            \"This is just to confirm the details of your meeting, please say 'no' if you want to cancel it and 'yes' if you want to confirm the meeting.\")\r\n        },\r\n    repetition: {\r\n        initial: \"prompt\" ,\r\n        on: {\r\n            RECOGNISED: [{\r\n                cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                target: \"confirmation\"},\r\n                \r\n                {\r\n                cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                target: \".canceled\"},\r\n                  {cond: (context) => \"unsure\" in (boolean_grammar[context.recResult] || {}),\r\n                actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                target: \".specific\"},\r\n                  {cond: (context) => \"help\" in (grammar[context.recResult] || {}),\r\n                actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                target: \".help\"},\r\n              {\r\n                actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                target: \".nomatch\"}],\r\n              TIMEOUT1: '.timeout1',\r\n            TIMEOUT2: '.timeout2',\r\n            TIMEOUT3: '.timeout3',\r\n            TIMEOUT4: '.timeout4'\r\n        },\r\n        ...say_ask_nomatch_timeout(send((context) => ({\r\n            type: \"SPEAK\",\r\n            value: `Just to confirm, do you want me to make an appointment with ${context.person} on ${context.day} at ${context.time}?`})),\r\n             \"This is just to confirm the details of your meeting, please say 'no' if you want to cancel it and 'yes' if you want to confirm it.\") \r\n        },\r\n    confirmation: {\r\n        initial: \"prompt\" ,\r\n        on: {\r\n             RECOGNISED: [{\r\n                cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                target: \".to_do\"},\r\n                {\r\n                cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                target: \".idle\"},\r\n                {\r\n                cond: (context) => \"unsure\" in (boolean_grammar[context.recResult] || {}),\r\n                actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                target: \".specific\"},\r\n                  {cond: (context) => \"help\" in (grammar[context.recResult] || {}),\r\n                actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                target: \".help\"},\r\n              {\r\n                actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                target: \".nomatch\"}],\r\n              TIMEOUT1: '.timeout1',\r\n            TIMEOUT2: '.timeout2',\r\n            TIMEOUT3: '.timeout3',\r\n            TIMEOUT4: '.timeout4'\r\n        },\r\n        ...say_ask_nomatch_timeout(say('Your appointment has been scheduled! Do you want me to add it to your to do item?'), \r\n        \"The appointment tool has not yet been developed, and I only need to ask this as a formality, please say yes.\")\r\n        } */\n\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"UsersCommand\");","map":{"version":3,"sources":["C:/Users/R/Desktop/DialogueSystems/Lab2/react-xstate-colourchanger/src/dmAppointmentLab4VG.ts"],"names":["send","assign","actions","loadGrammar","parse","grammar","gramm","UsersCommand","recResult","prs","split","result","resultsForRule","$root","name","day","time","help","yes_no","say","text","_context","type","value","listen","say_ask_nomatch_timeout","say_this","help_message","initial","states","prompt","entry","on","ENDSPEECH","ask1","delay","id","ask2","ask3","ask4","nomatch","timeout1","timeout2","timeout3","timeout4","idle","to_do","specific","canceled","cancel","dmMachine","start_point","CLICK","appointment","who","RECOGNISED","cond","context","AppointmentCommand","undefined","srgs_name","srgs_day","srgs_time","srgs_help","srgs_yes_no","target","TIMEOUT1","TIMEOUT2","TIMEOUT3","TIMEOUT4","who_processing","length","repetition"],"mappings":"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mCA,MAAM,CAAC,OAAD,CAAzC,EAAoDA,MAAM,CAAC,OAAD,CAA1D,CALR;AAMDgB,UAAAA,MAAM,EAAE;AANP,SA5BW,EAqCb;AAACA,UAAAA,MAAM,EAAE;AAAT,SArCa,CADb;AAwCIC,QAAAA,QAAQ,EAAE,WAxCd;AAyCIC,QAAAA,QAAQ,EAAE,WAzCd;AA0CIC,QAAAA,QAAQ,EAAE,WA1Cd;AA2CIC,QAAAA,QAAQ,EAAE;AA3Cd;AAFO,OAgDJ5C,uBAAuB,CAACN,GAAG,CAAC,GAAD,CAAJ,EAAU,GAAV,CAhDnB,CAtEd;AAyHAJ,IAAAA,GAAG,EAAE;AACDa,MAAAA,OAAO,EAAE,QADR;AAEDI,MAAAA,EAAE,EAAE;AAACC,QAAAA,SAAS,EAAE;AAAZ,OAFH;AAGDJ,MAAAA,MAAM,EAAC;AACHC,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAEZ,GAAG,CAAC,aAAD;AADN;AADL;AAHN,KAzHL;AAiIAoD,IAAAA,MAAM,EAAE;AACJ3C,MAAAA,OAAO,EAAE,QADL;AAEJI,MAAAA,EAAE,EAAE;AAACC,QAAAA,SAAS,EAAE;AAAZ,OAFA;AAGJJ,MAAAA,MAAM,EAAC;AACHC,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAEZ,GAAG,CAAC,gBAAD;AADN;AADL;AAHH,KAjIR;AAyIAqD,IAAAA,UAAU,EAAE;AACR5C,MAAAA,OAAO,EAAE,QADD;AAERI,MAAAA,EAAE,EAAE;AAACC,QAAAA,SAAS,EAAE;AAAZ,OAFI;AAGRJ,MAAAA,MAAM,EAAC;AACHC,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAEZ,GAAG,CAAC,oBAAD;AADN;AADL;AAHC;AAQZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA5SY;AAHwD,CAA7D","sourcesContent":["import { MachineConfig, send, Action, assign, actions } from \"xstate\";\r\nimport { loadGrammar } from './runparser'\r\nimport { parse } from './chartparser'\r\nimport { grammar } from './grammars/VGappointmentGrammar'\r\n\r\nconst gramm = loadGrammar(grammar)\r\n\r\nlet UsersCommand = (recResult: string) => {\r\nconst prs = parse(recResult.split(/\\s+/), gramm);\r\nconst result = prs.resultsForRule(gramm.$root)[0];     \r\nreturn [result.name, result.day, result.time, result.help, result.yes_no]}\r\n\r\nexport function say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nexport function listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\nfunction say_ask_nomatch_timeout(say_this: Action<SDSContext, SDSEvent>, help_message: string): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({ \r\n        initial: 'prompt',\r\n        states: {\r\n            prompt: {\r\n                entry: say_this,\r\n\r\n                on: { ENDSPEECH: 'ask1' }\r\n            },\r\n            ask1: {\r\n                entry: [send('LISTEN'), send ('TIMEOUT1', {delay: 4500, id: 'time1'})]\r\n            },\r\n            ask2: {\r\n                entry: [send('LISTEN'), send ('TIMEOUT2', {delay: 4500, id: 'time2'})]\r\n            },\r\n            ask3: {\r\n                entry: [send('LISTEN'), send ('TIMEOUT3', {delay: 4500, id: 'time3'})]\r\n            },\r\n            ask4: {\r\n                entry: [send('LISTEN'), send ('TIMEOUT4', {delay: 4500, id: 'time4'})]\r\n            },\r\n            nomatch: {\r\n                entry: say('Sorry, I did not manage to understand this one. Please repeat.'),\r\n                on: {ENDSPEECH: \"ask2\"}\r\n            },\r\n            timeout1: {\r\n                entry: say('I did not hear you this time, please speak louder.'),\r\n                on: {ENDSPEECH: \"ask2\"}\r\n            },\r\n            timeout2: {\r\n                entry: say('I still cannot hear you, please try again.'),\r\n                on: {ENDSPEECH: \"ask3\"}\r\n            },\r\n            timeout3: {\r\n                entry: say('Sorry, still nothing.'),\r\n                on: {ENDSPEECH: \"ask4\"}\r\n            },\r\n            timeout4: {\r\n                //Add idle state after 3 reprompts//\r\n                entry: say('Returning to idle.'),\r\n                on: {ENDSPEECH: \"idle\"}\r\n            },\r\n            idle:{\r\n                type: 'final'\r\n            },\r\n            to_do:{\r\n                entry: say('Sorry, this tool has not been developed yet. I will now return to idle state.'),\r\n                on: {ENDSPEECH: 'idle'}\r\n            },\r\n            specific:{\r\n                entry: say(\"Please be more specific\"),\r\n                on: {ENDSPEECH: \"ask2\"}\r\n            },\r\n            canceled:{\r\n                entry: say(\"Your appointment has been canceled. I will now returnto idle state.\")\r\n            },\r\n            help:{\r\n                entry: say(help_message),\r\n                on: {ENDSPEECH: \"ask2\"}\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nconst {cancel} = actions\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    \r\n    initial: 'start_point',\r\n    states: {\r\n        start_point:{\r\n            id: 'starting_point',\r\n            on: {\r\n                CLICK: 'appointment'\r\n            }\r\n        },\r\n        appointment:{\r\n            initial: 'prompt',\r\n            on:{ ENDSPEECH: 'who'\r\n            },\r\n            states:{\r\n                prompt:{\r\n                    entry: say(\"Let's create an appointment.\")\r\n                }\r\n            }\r\n        },\r\n            who: {\r\n                initial: \"prompt\",\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => {return { AppointmentCommand: UsersCommand(context.recResult) } !== undefined},\r\n                        actions: [assign((context) => { return {srgs_name: UsersCommand(context.recResult)[0] }}),\r\n                                  assign((context) => { return {srgs_day: UsersCommand(context.recResult)[1] }}),\r\n                                  assign((context) => { return {srgs_time: UsersCommand(context.recResult)[2] }}),\r\n                                  assign((context) => { return {srgs_help: UsersCommand(context.recResult)[3] }}),\r\n                                  assign((context) => { return {srgs_yes_no: UsersCommand(context.recResult)[4] }}),\r\n                        cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: 'who_processing'},\r\n\r\n                        {cond: (context) => {return { AppointmentCommand: UsersCommand(context.recResult) } === undefined},\r\n                        target: \".nomatch\"}],\r\n/*\r\n                        {cond: (context) => UsersCommand(context.recResult)[0] !== \"None\" && //Name provided +++\r\n                        UsersCommand(context.recResult)[1] !== \"None\" &&  //Day provided +++\r\n                         UsersCommand(context.recResult)[2] === \"None\" && //Time not provided ---\r\n                         UsersCommand(context.recResult)[3] === \"None\" && //Not a help answer ---\r\n                         UsersCommand(context.recResult)[4] === \"None\",//Not a yes_no answer ---\r\n                       actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                       target: \"length\"\r\n                       },\r\n \r\n                       {cond: (context) => UsersCommand(context.recResult)[0] !== \"None\" && //Name provided +++\r\n                       UsersCommand(context.recResult)[1] === \"None\" &&  //Day not provided ---\r\n                        UsersCommand(context.recResult)[2] === \"None\" && //Time not provided ---\r\n                        UsersCommand(context.recResult)[3] === \"None\" && //Not a help answer ---\r\n                        UsersCommand(context.recResult)[4] === \"None\",//Not a yes_no answer ---\r\n                      actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                      target: \"day\"\r\n                      },\r\n \r\n                      {cond: (context) => UsersCommand(context.recResult)[0] === \"None\" && //Name provided ----\r\n                      UsersCommand(context.recResult)[1] === \"None\" &&  //Day not provided ---\r\n                       UsersCommand(context.recResult)[2] === \"None\" && //Time not provided ---\r\n                       UsersCommand(context.recResult)[3] === \"help\" && //Help answer +++\r\n                       UsersCommand(context.recResult)[4] === \"None\",//Not a yes_no answer ---\r\n                     actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                     target: \".help\"\r\n                     }],\r\n*/\r\n                    //{target: \".nomatch\" }],//\r\n                    \r\n                        TIMEOUT1: '.timeout1',\r\n                        TIMEOUT2: '.timeout2',\r\n                        TIMEOUT3: '.timeout3',\r\n                        TIMEOUT4: '.timeout4'\r\n                    \r\n                },\r\n                ...say_ask_nomatch_timeout(say('Who are you meeting with?'), \"Please specify the name of the person you are planning to meet up with. Pick someone from your contacts list.\")\r\n            },\r\n            who_processing:{\r\n                initial: \"prompt\",\r\n                on:{\r\n                    RECOGNISED: [{\r\n                        cond: (context) => UsersCommand(context.recResult)[0] !== \"None\" && //Name provided +++\r\n                        UsersCommand(context.recResult)[1] !== \"None\" &&  //Day provided +++\r\n                         UsersCommand(context.recResult)[2] !== \"None\" && //Time provided +++\r\n                         UsersCommand(context.recResult)[3] === \"None\" && //Not a help answer ---\r\n                         UsersCommand(context.recResult)[4] === \"None\",//Not a yes_no answer ---\r\n                       actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                       target: \"repetition\"\r\n                       },\r\n\r\n                       {cond: (context) => UsersCommand(context.recResult)[0] !== \"None\" && //Name provided +++\r\n                       UsersCommand(context.recResult)[1] !== \"None\" &&  //Day provided +++\r\n                        UsersCommand(context.recResult)[2] === \"None\" && //Time not provided ---\r\n                        UsersCommand(context.recResult)[3] === \"None\" && //Not a help answer ---\r\n                        UsersCommand(context.recResult)[4] === \"None\",//Not a yes_no answer ---\r\n                      actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                      target: \"length\"\r\n                      },\r\n\r\n                      {cond: (context) => UsersCommand(context.recResult)[0] !== \"None\" && //Name provided +++\r\n                      UsersCommand(context.recResult)[1] === \"None\" &&  //Day not provided ---\r\n                       UsersCommand(context.recResult)[2] === \"None\" && //Time not provided ---\r\n                       UsersCommand(context.recResult)[3] === \"None\" && //Not a help answer ---\r\n                       UsersCommand(context.recResult)[4] === \"None\",//Not a yes_no answer ---\r\n                     actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                     target: \"day\"\r\n                     },\r\n\r\n                     {cond: (context) => UsersCommand(context.recResult)[0] === \"None\" && //Name provided ----\r\n                     UsersCommand(context.recResult)[1] === \"None\" &&  //Day not provided ---\r\n                      UsersCommand(context.recResult)[2] === \"None\" && //Time not provided ---\r\n                      UsersCommand(context.recResult)[3] === \"help\" && //Help answer +++\r\n                      UsersCommand(context.recResult)[4] === \"None\",//Not a yes_no answer ---\r\n                    actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                    target: \".help\"\r\n                    },\r\n\r\n                   {target: \".nomatch\" }],\r\n                   \r\n                       TIMEOUT1: '.timeout1',\r\n                       TIMEOUT2: '.timeout2',\r\n                       TIMEOUT3: '.timeout3',\r\n                       TIMEOUT4: '.timeout4'\r\n                   \r\n               },\r\n                   ...say_ask_nomatch_timeout(say(\"a\"),\"a\")\r\n            },\r\n\r\n            day: {\r\n                initial: \"prompt\",\r\n                on: {ENDSPEECH: '#starting_point'},\r\n                states:{\r\n                    prompt: {\r\n                        entry: say('Reached day')\r\n                }}\r\n            },\r\n            length: {\r\n                initial: \"prompt\",\r\n                on: {ENDSPEECH: '#starting_point'},\r\n                states:{\r\n                    prompt: {\r\n                        entry: say('Reached length')\r\n                }}\r\n            },\r\n            repetition: {\r\n                initial: \"prompt\",\r\n                on: {ENDSPEECH: '#starting_point'},\r\n                states:{\r\n                    prompt: {\r\n                        entry: say('Reached repetition')\r\n                }}\r\n            }\r\n            /* day: {\r\n                initial: \"prompt\",\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"day\" in (grammar[context.recResult] || {}),\r\n                        actions: [assign((context) => {return{ day: grammar[context.recResult].day}}), cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \"length\"\r\n                    },\r\n\r\n                    {\r\n                        cond: (context) => \"help\" in (grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".help\"\r\n                    },\r\n\r\n                    {actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                    target: \".nomatch\"}],\r\n\r\n                    TIMEOUT1: '.timeout1',\r\n                    TIMEOUT2: '.timeout2',\r\n                    TIMEOUT3: '.timeout3',\r\n                    TIMEOUT4: '.timeout4'\r\n                },\r\n                ...say_ask_nomatch_timeout(say('On which day is your meating?'), \"You need to specify the day on which you meeting is to be held. Please pick a day of the week. \") //Can add name specification\r\n            },\r\n            length: {\r\n                initial: \"prompt\" ,\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \"whole_day\"},\r\n\r\n                        {cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \"time\"},\r\n\r\n                        {cond: (context) => \"uncertain\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".specific\"},\r\n\r\n                        {cond: (context) => \"help\" in (grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".help\"},\r\n\r\n                    {actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target:\".nomatch\"}],\r\n\r\n                    TIMEOUT1: '.timeout1',\r\n                    TIMEOUT2: '.timeout2',\r\n                    TIMEOUT3: '.timeout3',\r\n                    TIMEOUT4: '.timeout4'\r\n\r\n                    },\r\n                \r\n                    ...say_ask_nomatch_timeout(say('Will it take the whole day?'), \"You need to specify whether your meeting will take the whole day so that I can book it accordingly. Please answer with yes or no.\")\r\n            },\r\n            time: {\r\n                initial: \"prompt\" ,\r\n                on: {\r\n                    RECOGNISED: [{\r\n\r\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n                    actions: [assign((context) => {return{ time: grammar[context.recResult].time}}), cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                    target: \"repetition\"},\r\n\r\n                    {cond: (context) => \"help\" in (grammar[context.recResult] || {}),\r\n                    actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                    target: \".help\"},\r\n\r\n                    {\r\n                    actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                    target: \".nomatch\"\r\n                    }],\r\n\r\n                    TIMEOUT1: '.timeout1',\r\n                    TIMEOUT2: '.timeout2',\r\n                    TIMEOUT3: '.timeout3',\r\n                    TIMEOUT4: '.timeout4'\r\n                },\r\n                ...say_ask_nomatch_timeout(say('At what time is your meeting?'), \"You need to specify the time when your meeting will start so that I can book it accordingly. Please tell me the time in military notation or, in other words, 24-hours format.\")\r\n            },\r\n            whole_day: {\r\n                initial: \"prompt\" ,\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \"confirmation\"},\r\n                        {\r\n                        cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".canceled\"},\r\n\r\n                        {cond: (context) => \"help\" in (grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".help\"},\r\n\r\n                    {\r\n                    actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                    target: \".nomatch\"}],\r\n\r\n                    TIMEOUT1: '.timeout1',\r\n                    TIMEOUT2: '.timeout2',\r\n                    TIMEOUT3: '.timeout3',\r\n                    TIMEOUT4: '.timeout4'\r\n                },\r\n                ...say_ask_nomatch_timeout(send((context) => ({\r\n                    type: \"SPEAK\",\r\n                    value: `Just to confirm, do you want me to make an appointment with ${context.person} on ${context.day} for the whole day?`})), \r\n                    \"This is just to confirm the details of your meeting, please say 'no' if you want to cancel it and 'yes' if you want to confirm the meeting.\")\r\n                },\r\n            repetition: {\r\n                initial: \"prompt\" ,\r\n                on: {\r\n                    RECOGNISED: [{\r\n                        cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \"confirmation\"},\r\n                        \r\n                        {\r\n                        cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".canceled\"},\r\n\r\n                        {cond: (context) => \"unsure\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".specific\"},\r\n\r\n                        {cond: (context) => \"help\" in (grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".help\"},\r\n\r\n                    {\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".nomatch\"}],\r\n\r\n                    TIMEOUT1: '.timeout1',\r\n                    TIMEOUT2: '.timeout2',\r\n                    TIMEOUT3: '.timeout3',\r\n                    TIMEOUT4: '.timeout4'\r\n                },\r\n                ...say_ask_nomatch_timeout(send((context) => ({\r\n                    type: \"SPEAK\",\r\n                    value: `Just to confirm, do you want me to make an appointment with ${context.person} on ${context.day} at ${context.time}?`})),\r\n                     \"This is just to confirm the details of your meeting, please say 'no' if you want to cancel it and 'yes' if you want to confirm it.\") \r\n                },\r\n            confirmation: {\r\n                initial: \"prompt\" ,\r\n                on: {\r\n                     RECOGNISED: [{\r\n                        cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".to_do\"},\r\n                        {\r\n                        cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".idle\"},\r\n                        {\r\n                        cond: (context) => \"unsure\" in (boolean_grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".specific\"},\r\n\r\n                        {cond: (context) => \"help\" in (grammar[context.recResult] || {}),\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".help\"},\r\n\r\n                    {\r\n                        actions: [cancel('time1'), cancel('time2'), cancel('time3'), cancel('time4')],\r\n                        target: \".nomatch\"}],\r\n\r\n                    TIMEOUT1: '.timeout1',\r\n                    TIMEOUT2: '.timeout2',\r\n                    TIMEOUT3: '.timeout3',\r\n                    TIMEOUT4: '.timeout4'\r\n                },\r\n                ...say_ask_nomatch_timeout(say('Your appointment has been scheduled! Do you want me to add it to your to do item?'), \r\n                \"The appointment tool has not yet been developed, and I only need to ask this as a formality, please say yes.\")\r\n                } */\r\n            \r\n            \r\n            \r\n            },\r\n        }\r\n)\r\n"]},"metadata":{},"sourceType":"module"}