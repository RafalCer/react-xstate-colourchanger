{"ast":null,"code":"import{send,assign}from\"xstate\";function say(text){return send(_context=>({type:\"SPEAK\",value:text}));}function listen(){return send('LISTEN');}const grammar={\"John\":{person:\"John Appleseed\"},\"Jack\":{person:\"Jack Jackson\"},\"Lena\":{person:\"Lena Jelena\"},\"Natalie\":{person:\"Natalie Portman\"},\"Bruce\":{person:\"Bruce W\"},\"Ausrine\":{person:\"Ausrine Armonaite\"},\"Zbignew\":{person:\"Jedinskij\"},\"on Monday\":{day:\"Monday\"},\"on Tuesday\":{day:\"Tuesday\"},\"on Wednesday\":{day:\"Wednesday\"},\"on Thursday\":{day:\"Thursday\"},\"on Friday\":{day:\"Friday\"},\"on Satudary\":{day:\"Satuday\"},\"on Sunday\":{day:\"Sunday\"},\"at ten\":{time:\"10:00\"},\"at eleven\":{time:\"11:00\"},\"at twelve\":{time:\"12:00\"},\"at one\":{time:\"13:00\"},\"at two\":{time:\"14:00\"},\"at three\":{time:\"15:00\"},\"at four\":{time:\"16:00\"},\"at five\":{time:\"17:00\"},\"at six\":{time:\"18:00\"},\"at seven\":{time:\"19:00\"}};const boolean_grammar={\"yes\":{agreement:Boolean(true)},\"of course\":{agreement:Boolean(true)},\"sure\":{agreement:Boolean(true)},\"no\":{disagreement:Boolean(false)},\"no way\":{disagreement:Boolean(false)},\"absolutely not\":{disagreement:Boolean(false)}};export const dmMachine={initial:'init',states:{init:{on:{CLICK:'welcome'}},welcome:{initial:\"prompt\",on:{ENDSPEECH:\"who\"},states:{prompt:{entry:say(\"Let's create an appointment\")}}},who:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"person\"in grammar[context.recResult],actions:assign(context=>{return{person:grammar[context.recResult].person};}),target:\"day\"},{target:\".nomatch\"}]},states:{prompt:{entry:say(\"Who are you meeting with?\"),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry I don't know them\"),on:{ENDSPEECH:\"prompt\"}}}},day:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"day\"in(grammar[context.recResult]||{}),actions:assign(context=>{return{day:grammar[context.recResult].day};}),target:\"length\"},{target:\".nomatch\"}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"OK. \".concat(context.person,\". On which day is your meeting?\")}))},ask:{entry:listen()},nomatch:{entry:say(\"Sorry, I don't understand. Please repeat\"),on:{ENDSPEECH:\"ask\"}}}},length:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"agreement\"in(boolean_grammar[context.recResult]||{}),target:\"whole_day\"},{cond:context=>\"disagreement\"in(boolean_grammar[context.recResult]||{}),target:\"time\"},{target:\".nomatch\"}]},states:{prompt:{entry:say(\"Will it take the whole day?\"),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry, I don't understand. Please repeat\"),on:{ENDSPEECH:\"ask\"}}}},time:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"time\"in(grammar[context.recResult]||{}),actions:assign(context=>{return{time:grammar[context.recResult].time};}),target:\"repetition\"},{target:\".nomatch\"}]},states:{prompt:{entry:say(\"What time is your meeting?\"),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry, I don't understand. Please repeart\"),on:{ENDSPEECH:\"ask\"}}}},whole_day:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"agreement\"in(boolean_grammar[context.recResult]||{}),target:\"confirmation\"},{cond:context=>\"disagreement\"in(boolean_grammar[context.recResult]||{}),target:\"who\"},{target:\".nomatch\"}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Do you want me to create an appointment with \".concat(context.person,\" on \").concat(context.day,\" at \").concat(context.day,\"?\")}))},ask:{entry:listen()},nomatch:{entry:say(\"Sorry, I don't understand. Please repeart\"),on:{ENDSPEECH:\"ask\"}}}},repetition:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"agreement\"in(boolean_grammar[context.recResult]||{}),target:\"confirmation\"},{cond:context=>\"disagreement\"in(boolean_grammar[context.recResult]||{}),target:\"who\"},{target:\".nomatch\"}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Do you want me to create an appointment with \".concat(context.person,\" on \").concat(context.day,\" for the whole day?\")}))},ask:{entry:listen()},nomatch:{entry:say(\"Sorry, I don't understand. Please repeart\"),on:{ENDSPEECH:\"ask\"}}}},confirmation:{initial:\"prompt\",on:{ENDSPEECH:\"who\"},states:{prompt:{entry:say(\"Your appointment has been created!\")}}}}};","map":{"version":3,"sources":["C:/Users/R/Desktop/DialogueSystems/Lab2/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","say","text","_context","type","value","listen","grammar","person","day","time","boolean_grammar","agreement","Boolean","disagreement","dmMachine","initial","states","init","on","CLICK","welcome","ENDSPEECH","prompt","entry","who","RECOGNISED","cond","context","recResult","actions","target","ask","nomatch","length","whole_day","repetition","confirmation"],"mappings":"AAAA,OAAwBA,IAAxB,CAAsCC,MAAtC,KAAoD,QAApD,CAGA,QAASC,CAAAA,GAAT,CAAaC,IAAb,CAAyD,CACrD,MAAOH,CAAAA,IAAI,CAAEI,QAAD,GAA2B,CAAEC,IAAI,CAAE,OAAR,CAAiBC,KAAK,CAAEH,IAAxB,CAA3B,CAAD,CAAX,CACH,CAED,QAASI,CAAAA,MAAT,EAAgD,CAC5C,MAAOP,CAAAA,IAAI,CAAC,QAAD,CAAX,CACH,CAED,KAAMQ,CAAAA,OAA8E,CAAG,CACnF,OAAQ,CAAEC,MAAM,CAAE,gBAAV,CAD2E,CAEnF,OAAQ,CAAEA,MAAM,CAAE,cAAV,CAF2E,CAGnF,OAAQ,CAAEA,MAAM,CAAE,aAAV,CAH2E,CAInF,UAAW,CAAEA,MAAM,CAAE,iBAAV,CAJwE,CAKnF,QAAS,CAAEA,MAAM,CAAE,SAAV,CAL0E,CAMnF,UAAW,CAAEA,MAAM,CAAE,mBAAV,CANwE,CAOnF,UAAW,CAAEA,MAAM,CAAE,WAAV,CAPwE,CASnF,YAAa,CAACC,GAAG,CAAE,QAAN,CATsE,CAUnF,aAAc,CAACA,GAAG,CAAE,SAAN,CAVqE,CAWnF,eAAgB,CAACA,GAAG,CAAE,WAAN,CAXmE,CAYnF,cAAe,CAACA,GAAG,CAAE,UAAN,CAZoE,CAanF,YAAa,CAACA,GAAG,CAAE,QAAN,CAbsE,CAcnF,cAAe,CAACA,GAAG,CAAE,SAAN,CAdoE,CAenF,YAAa,CAACA,GAAG,CAAE,QAAN,CAfsE,CAiBnF,SAAU,CAAEC,IAAI,CAAE,OAAR,CAjByE,CAkBnF,YAAa,CAACA,IAAI,CAAE,OAAP,CAlBsE,CAmBnF,YAAa,CAACA,IAAI,CAAE,OAAP,CAnBsE,CAoBnF,SAAU,CAACA,IAAI,CAAE,OAAP,CApByE,CAqBnF,SAAU,CAACA,IAAI,CAAE,OAAP,CArByE,CAsBnF,WAAY,CAACA,IAAI,CAAE,OAAP,CAtBuE,CAuBnF,UAAW,CAACA,IAAI,CAAE,OAAP,CAvBwE,CAwBnF,UAAW,CAACA,IAAI,CAAE,OAAP,CAxBwE,CAyBnF,SAAU,CAACA,IAAI,CAAE,OAAP,CAzByE,CA0BnF,WAAY,CAACA,IAAI,CAAE,OAAP,CA1BuE,CAAvF,CA+BA,KAAMC,CAAAA,eAAiF,CAAG,CACtF,MAAO,CAACC,SAAS,CAAEC,OAAO,CAAC,IAAD,CAAnB,CAD+E,CAEtF,YAAa,CAACD,SAAS,CAAEC,OAAO,CAAC,IAAD,CAAnB,CAFyE,CAGtF,OAAQ,CAACD,SAAS,CAAEC,OAAO,CAAC,IAAD,CAAnB,CAH8E,CAItF,KAAM,CAACC,YAAY,CAAED,OAAO,CAAC,KAAD,CAAtB,CAJgF,CAKtF,SAAU,CAACC,YAAY,CAAED,OAAO,CAAC,KAAD,CAAtB,CAL4E,CAMtF,iBAAkB,CAACC,YAAY,CAAED,OAAO,CAAC,KAAD,CAAtB,CANoE,CAA1F,CASA,MAAO,MAAME,CAAAA,SAAmD,CAAI,CAChEC,OAAO,CAAE,MADuD,CAEhEC,MAAM,CAAE,CACJC,IAAI,CAAE,CACFC,EAAE,CAAE,CACAC,KAAK,CAAE,SADP,CADF,CADF,CAMJC,OAAO,CAAE,CACLL,OAAO,CAAE,QADJ,CAELG,EAAE,CAAE,CAAEG,SAAS,CAAE,KAAb,CAFC,CAGLL,MAAM,CAAE,CACJM,MAAM,CAAE,CAAEC,KAAK,CAAEvB,GAAG,CAAC,6BAAD,CAAZ,CADJ,CAHH,CANL,CAaJwB,GAAG,CAAE,CACDT,OAAO,CAAE,QADR,CAEDG,EAAE,CAAE,CACAO,UAAU,CAAE,CAAC,CACTC,IAAI,CAAGC,OAAD,EAAa,UAAarB,CAAAA,OAAO,CAACqB,OAAO,CAACC,SAAT,CAD9B,CAETC,OAAO,CAAE9B,MAAM,CAAE4B,OAAD,EAAa,CAAE,MAAO,CAAEpB,MAAM,CAAED,OAAO,CAACqB,OAAO,CAACC,SAAT,CAAP,CAA2BrB,MAArC,CAAP,CAAsD,CAAtE,CAFN,CAGTuB,MAAM,CAAE,KAHC,CAAD,CAMZ,CAAEA,MAAM,CAAE,UAAV,CANY,CADZ,CAFH,CAWDd,MAAM,CAAE,CACJM,MAAM,CAAE,CACJC,KAAK,CAAEvB,GAAG,CAAC,2BAAD,CADN,CAEJkB,EAAE,CAAE,CAAEG,SAAS,CAAE,KAAb,CAFA,CADJ,CAKJU,GAAG,CAAE,CACDR,KAAK,CAAElB,MAAM,EADZ,CALD,CAQJ2B,OAAO,CAAE,CACLT,KAAK,CAAEvB,GAAG,CAAC,yBAAD,CADL,CAELkB,EAAE,CAAE,CAAEG,SAAS,CAAE,QAAb,CAFC,CARL,CAXP,CAbD,CAsCJb,GAAG,CAAE,CACDO,OAAO,CAAE,QADR,CAEDG,EAAE,CAAE,CACAO,UAAU,CAAE,CAAC,CACTC,IAAI,CAAGC,OAAD,EAAa,QAAUrB,OAAO,CAACqB,OAAO,CAACC,SAAT,CAAP,EAA8B,EAAxC,CADV,CAETC,OAAO,CAAE9B,MAAM,CAAE4B,OAAD,EAAa,CAAC,MAAM,CAAEnB,GAAG,CAAEF,OAAO,CAACqB,OAAO,CAACC,SAAT,CAAP,CAA2BpB,GAAlC,CAAN,CAA6C,CAA5D,CAFN,CAGTsB,MAAM,CAAE,QAHC,CAAD,CAKZ,CAACA,MAAM,CAAE,UAAT,CALY,CADZ,CAFH,CAUDd,MAAM,CAAE,CACJM,MAAM,CAAE,CACJC,KAAK,CAAEzB,IAAI,CAAE6B,OAAD,GAAc,CACtBxB,IAAI,CAAE,OADgB,CAEtBC,KAAK,eAASuB,OAAO,CAACpB,MAAjB,mCAFiB,CAAd,CAAD,CADP,CADJ,CAMJwB,GAAG,CAAE,CACDR,KAAK,CAAElB,MAAM,EADZ,CAND,CASJ2B,OAAO,CAAE,CACLT,KAAK,CAAEvB,GAAG,CAAC,0CAAD,CADL,CAELkB,EAAE,CAAE,CAACG,SAAS,CAAE,KAAZ,CAFC,CATL,CAVP,CAtCD,CA+DJY,MAAM,CAAE,CACJlB,OAAO,CAAE,QADL,CAEJG,EAAE,CAAE,CACAO,UAAU,CAAE,CAAC,CACTC,IAAI,CAAGC,OAAD,EAAa,cAAgBjB,eAAe,CAACiB,OAAO,CAACC,SAAT,CAAf,EAAsC,EAAtD,CADV,CAETE,MAAM,CAAE,WAFC,CAAD,CAIR,CAACJ,IAAI,CAAGC,OAAD,EAAa,iBAAmBjB,eAAe,CAACiB,OAAO,CAACC,SAAT,CAAf,EAAsC,EAAzD,CAApB,CACAE,MAAM,CAAE,MADR,CAJQ,CAOZ,CAACA,MAAM,CAAC,UAAR,CAPY,CADZ,CAFA,CAaJd,MAAM,CAAE,CACJM,MAAM,CAAE,CACJC,KAAK,CAAEvB,GAAG,CAAC,6BAAD,CADN,CAEJkB,EAAE,CAAE,CAACG,SAAS,CAAE,KAAZ,CAFA,CADJ,CAKJU,GAAG,CAAE,CACDR,KAAK,CAAElB,MAAM,EADZ,CALD,CAQJ2B,OAAO,CAAE,CACLT,KAAK,CAAEvB,GAAG,CAAC,0CAAD,CADL,CAETkB,EAAE,CAAE,CAACG,SAAS,CAAE,KAAZ,CAFK,CARL,CAbJ,CA/DJ,CA0FJZ,IAAI,CAAE,CACFM,OAAO,CAAE,QADP,CAEFG,EAAE,CAAE,CACAO,UAAU,CAAE,CAAC,CACTC,IAAI,CAAGC,OAAD,EAAa,SAAWrB,OAAO,CAACqB,OAAO,CAACC,SAAT,CAAP,EAA8B,EAAzC,CADV,CAETC,OAAO,CAAE9B,MAAM,CAAE4B,OAAD,EAAa,CAAC,MAAM,CAAElB,IAAI,CAAEH,OAAO,CAACqB,OAAO,CAACC,SAAT,CAAP,CAA2BnB,IAAnC,CAAN,CAA+C,CAA9D,CAFN,CAGTqB,MAAM,CAAE,YAHC,CAAD,CAKZ,CACAA,MAAM,CAAE,UADR,CALY,CADZ,CAFF,CAYFd,MAAM,CAAE,CACJM,MAAM,CAAE,CACJC,KAAK,CAAEvB,GAAG,CAAC,4BAAD,CADN,CAEJkB,EAAE,CAAE,CAACG,SAAS,CAAE,KAAZ,CAFA,CADJ,CAKJU,GAAG,CAAE,CACDR,KAAK,CAAElB,MAAM,EADZ,CALD,CAQJ2B,OAAO,CAAE,CACLT,KAAK,CAAEvB,GAAG,CAAC,2CAAD,CADL,CAELkB,EAAE,CAAE,CAACG,SAAS,CAAE,KAAZ,CAFC,CARL,CAZN,CA1FF,CAmHJa,SAAS,CAAE,CACPnB,OAAO,CAAE,QADF,CAEPG,EAAE,CAAE,CACAO,UAAU,CAAE,CAAC,CACTC,IAAI,CAAGC,OAAD,EAAa,cAAgBjB,eAAe,CAACiB,OAAO,CAACC,SAAT,CAAf,EAAsC,EAAtD,CADV,CAETE,MAAM,CAAE,cAFC,CAAD,CAGR,CACAJ,IAAI,CAAGC,OAAD,EAAa,iBAAmBjB,eAAe,CAACiB,OAAO,CAACC,SAAT,CAAf,EAAsC,EAAzD,CADnB,CAEAE,MAAM,CAAE,KAFR,CAHQ,CAOZ,CAACA,MAAM,CAAE,UAAT,CAPY,CADZ,CAFG,CAYPd,MAAM,CAAC,CACHM,MAAM,CAAC,CACHC,KAAK,CAAEzB,IAAI,CAAE6B,OAAD,GAAc,CACtBxB,IAAI,CAAE,OADgB,CAEtBC,KAAK,wDAAiDuB,OAAO,CAACpB,MAAzD,gBAAsEoB,OAAO,CAACnB,GAA9E,gBAAwFmB,OAAO,CAACnB,GAAhG,KAFiB,CAAd,CAAD,CADR,CADJ,CAQHuB,GAAG,CAAE,CACDR,KAAK,CAAElB,MAAM,EADZ,CARF,CAWH2B,OAAO,CAAE,CACLT,KAAK,CAAEvB,GAAG,CAAC,2CAAD,CADL,CAELkB,EAAE,CAAE,CAACG,SAAS,CAAE,KAAZ,CAFC,CAXN,CAZA,CAnHP,CA+IJc,UAAU,CAAE,CACRpB,OAAO,CAAE,QADD,CAERG,EAAE,CAAE,CACAO,UAAU,CAAE,CAAC,CACTC,IAAI,CAAGC,OAAD,EAAa,cAAgBjB,eAAe,CAACiB,OAAO,CAACC,SAAT,CAAf,EAAsC,EAAtD,CADV,CAETE,MAAM,CAAE,cAFC,CAAD,CAGR,CACAJ,IAAI,CAAGC,OAAD,EAAa,iBAAmBjB,eAAe,CAACiB,OAAO,CAACC,SAAT,CAAf,EAAsC,EAAzD,CADnB,CAEAE,MAAM,CAAE,KAFR,CAHQ,CAOZ,CAACA,MAAM,CAAE,UAAT,CAPY,CADZ,CAFI,CAYRd,MAAM,CAAC,CACHM,MAAM,CAAC,CACHC,KAAK,CAAEzB,IAAI,CAAE6B,OAAD,GAAc,CACtBxB,IAAI,CAAE,OADgB,CAEtBC,KAAK,wDAAiDuB,OAAO,CAACpB,MAAzD,gBAAsEoB,OAAO,CAACnB,GAA9E,uBAFiB,CAAd,CAAD,CADR,CADJ,CAQHuB,GAAG,CAAE,CACDR,KAAK,CAAElB,MAAM,EADZ,CARF,CAWH2B,OAAO,CAAE,CACLT,KAAK,CAAEvB,GAAG,CAAC,2CAAD,CADL,CAELkB,EAAE,CAAE,CAACG,SAAS,CAAE,KAAZ,CAFC,CAXN,CAZC,CA/IR,CA2KJe,YAAY,CAAE,CACVrB,OAAO,CAAE,QADC,CAEVG,EAAE,CAAE,CACAG,SAAS,CAAE,KADX,CAFM,CAKVL,MAAM,CAAE,CACJM,MAAM,CAAE,CACJC,KAAK,CAAEvB,GAAG,CAAC,oCAAD,CADN,CADJ,CALE,CA3KV,CAFwD,CAA7D","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\r\n\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nfunction listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\r\n    \"John\": { person: \"John Appleseed\" },\r\n    \"Jack\": { person: \"Jack Jackson\" },\r\n    \"Lena\": { person: \"Lena Jelena\" },\r\n    \"Natalie\": { person: \"Natalie Portman\" },\r\n    \"Bruce\": { person: \"Bruce W\" },\r\n    \"Ausrine\": { person: \"Ausrine Armonaite\" },\r\n    \"Zbignew\": { person: \"Jedinskij\" },\r\n\r\n    \"on Monday\": {day: \"Monday\" },\r\n    \"on Tuesday\": {day: \"Tuesday\" },\r\n    \"on Wednesday\": {day: \"Wednesday\" },\r\n    \"on Thursday\": {day: \"Thursday\" },\r\n    \"on Friday\": {day: \"Friday\" },\r\n    \"on Satudary\": {day: \"Satuday\" },\r\n    \"on Sunday\": {day: \"Sunday\" },\r\n\r\n    \"at ten\": { time: \"10:00\" },\r\n    \"at eleven\": {time: \"11:00\"},\r\n    \"at twelve\": {time: \"12:00\"},\r\n    \"at one\": {time: \"13:00\"},\r\n    \"at two\": {time: \"14:00\"},\r\n    \"at three\": {time: \"15:00\"},\r\n    \"at four\": {time: \"16:00\"},\r\n    \"at five\": {time: \"17:00\"},\r\n    \"at six\": {time: \"18:00\"},\r\n    \"at seven\": {time: \"19:00\"},\r\n\r\n\r\n}\r\n\r\nconst boolean_grammar: {[index: string]: {agreement?: boolean, disagreement?: boolean}} = {\r\n    \"yes\": {agreement: Boolean(true)},\r\n    \"of course\": {agreement: Boolean(true)},\r\n    \"sure\": {agreement: Boolean(true)},\r\n    \"no\": {disagreement: Boolean(false)},\r\n    \"no way\": {disagreement: Boolean(false)},\r\n    \"absolutely not\": {disagreement: Boolean(false)}\r\n}\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'welcome'\r\n            }\r\n        },\r\n        welcome: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"who\" },\r\n            states: {\r\n                prompt: { entry: say(\"Let's create an appointment\") }\r\n            }\r\n        },\r\n        who: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"person\" in (grammar[context.recResult]),\r\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\r\n                    target: \"day\"\r\n\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Who are you meeting with?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't know them\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        day: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => {return{ day: grammar[context.recResult].day}}),\r\n                    target: \"length\"\r\n                },\r\n                {target: \".nomatch\"}]\r\n             },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK. ${context.person}. On which day is your meeting?`\r\n                    }))},\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't understand. Please repeat\"),\r\n                    on: {ENDSPEECH: \"ask\"}\r\n                }\r\n            }\r\n        },\r\n        length: {\r\n            initial: \"prompt\" ,\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                    target: \"whole_day\"},\r\n\r\n                    {cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                    target: \"time\"},\r\n\r\n                {target:\".nomatch\"}]\r\n\r\n                },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Will it take the whole day?\"),\r\n                    on: {ENDSPEECH: \"ask\"}\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't understand. Please repeat\"),\r\n                on: {ENDSPEECH: \"ask\"}\r\n                }\r\n            }\r\n        },\r\n        time: {\r\n            initial: \"prompt\" ,\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => {return{ time: grammar[context.recResult].time}}),\r\n                    target: \"repetition\"\r\n                    },\r\n                {\r\n                target: \".nomatch\"\r\n                }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"What time is your meeting?\"),\r\n                    on: {ENDSPEECH: \"ask\"}\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't understand. Please repeart\"),\r\n                    on: {ENDSPEECH: \"ask\"}}\r\n                }\r\n        },\r\n        whole_day: {\r\n            initial: \"prompt\" ,\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                    target: \"confirmation\"},\r\n                    {\r\n                    cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                    target: \"who\"},\r\n\r\n                {target: \".nomatch\"}]\r\n            },\r\n            states:{\r\n                prompt:{\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value:`Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.day}?`\r\n                    }))\r\n\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't understand. Please repeart\"),\r\n                    on: {ENDSPEECH: \"ask\"}}\r\n            }\r\n        },\r\n        repetition: {\r\n            initial: \"prompt\" ,\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"agreement\" in (boolean_grammar[context.recResult] || {}),\r\n                    target: \"confirmation\"},\r\n                    {\r\n                    cond: (context) => \"disagreement\" in (boolean_grammar[context.recResult] || {}),\r\n                    target: \"who\"},\r\n\r\n                {target: \".nomatch\"}]\r\n            },\r\n            states:{\r\n                prompt:{\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value:`Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`\r\n                    }))\r\n\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't understand. Please repeart\"),\r\n                    on: {ENDSPEECH: \"ask\"}}\r\n            }\r\n        },\r\n        confirmation: {\r\n            initial: \"prompt\" ,\r\n            on: {\r\n                ENDSPEECH: \"who\"\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Your appointment has been created!\")\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n})\r\n"]},"metadata":{},"sourceType":"module"}