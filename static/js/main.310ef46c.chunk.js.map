{"version":3,"sources":["dmAppointment.js","index.tsx"],"names":["exports","__esModule","dmMachine","xstate_1","require","say","text","send","_context","type","value","grammar","person","day","time","initial","states","init","on","CLICK","welcome","ENDSPEECH","prompt","entry","whooo","RECOGNISED","cond","context","recResult","actions","assign","target","ask","nomatch","inspect","url","iframe","machine","Machine","id","dm","asrtts","idle","LISTEN","SPEAK","event","ttsAgenda","recognising","exit","ASRRESULT","match","speaking","recLogResult","console","log","test","logIntent","nluData","intent","name","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","listen","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","body","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.310ef46c.chunk.js","sourcesContent":["\"use strict\";\r\nexports.__esModule = true;\r\nexports.dmMachine = void 0;\r\nvar xstate_1 = require(\"xstate\");\r\nfunction say(text) {\r\n    return xstate_1.send(function (_context) { return ({ type: \"SPEAK\", value: text }); });\r\n}\r\nfunction listen() {\r\n    return xstate_1.send('LISTEN');\r\n}\r\nvar grammar = {\r\n    \"John\": { person: \"John Appleseed\" },\r\n    \"on Monday\": {day: \"Monday\" },\r\n    \"on Tuesday\": {day: \"Tuesday\" },\r\n    \"on Wednesday\": {day: \"Wednesday\" },\r\n    \"on Thursday\": {day: \"Thursday\" },\r\n    \"on Friday\": {day: \"Friday\" },\r\n    \"on Satudary\": {day: \"Satuday\" },\r\n    \"on Sunday\": {day: \"Sunday\" },\r\n    \"at ten\": { time: \"10:00\" },\r\n};\r\nexports.dmMachine = ({\r\n    initial: 'init',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'welcome'\r\n            }\r\n        },\r\n        welcome: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"whooo\" },\r\n            states: {\r\n                prompt: { entry: say(\"Let's create an appointment\") }\r\n            }\r\n        },\r\n        whooo: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                        cond: function (context) { return \"person\" in (grammar[context.recResult] || {}); },\r\n                        actions: xstate_1.assign(function (context) { return { person: grammar[context.recResult].person }; }),\r\n                        target: \"day\"\r\n                    }, { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Who are you meeting with?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't know them\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        day: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"init\" },\r\n            states: {\r\n                prompt: {\r\n                    entry: xstate_1.send(function (context) { return ({\r\n                        type: \"SPEAK\",\r\n                        value: \"OK. \" + context.person + \". On which day is your meeting?\"\r\n                    }); })\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmAppointment\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://rasa-nlu-api-00.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}